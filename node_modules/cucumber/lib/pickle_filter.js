'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _tag_expression_parser = require('cucumber-tag-expressions/lib/tag_expression_parser');

var _tag_expression_parser2 = _interopRequireDefault(_tag_expression_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEATURE_LINENUM_REGEXP = /^(.*?)((?::[\d]+)+)?$/;
var tagExpressionParser = new _tag_expression_parser2.default();

var PickleFilter = function () {
  function PickleFilter(_ref) {
    var featurePaths = _ref.featurePaths,
        names = _ref.names,
        tagExpression = _ref.tagExpression;
    (0, _classCallCheck3.default)(this, PickleFilter);

    this.featureUriToLinesMapping = this.getFeatureUriToLinesMapping(featurePaths || []);
    this.names = names || [];
    if (tagExpression) {
      this.tagExpressionNode = tagExpressionParser.parse(tagExpression || '');
    }
  }

  (0, _createClass3.default)(PickleFilter, [{
    key: 'getFeatureUriToLinesMapping',
    value: function getFeatureUriToLinesMapping(featurePaths) {
      var mapping = {};
      featurePaths.forEach(function (featurePath) {
        var match = FEATURE_LINENUM_REGEXP.exec(featurePath);
        if (match) {
          var uri = match[1];
          var linesExpression = match[2];
          if (linesExpression) {
            if (!mapping[uri]) {
              mapping[uri] = [];
            }
            linesExpression.slice(1).split(':').forEach(function (line) {
              mapping[uri].push(parseInt(line));
            });
          }
        }
      });
      return mapping;
    }
  }, {
    key: 'matches',
    value: function matches(_ref2) {
      var pickle = _ref2.pickle,
          uri = _ref2.uri;

      return this.matchesAnyLine({ pickle: pickle, uri: uri }) && this.matchesAnyName(pickle) && this.matchesAllTagExpressions(pickle);
    }
  }, {
    key: 'matchesAnyLine',
    value: function matchesAnyLine(_ref3) {
      var pickle = _ref3.pickle,
          uri = _ref3.uri;

      var lines = this.featureUriToLinesMapping[uri];
      if (lines) {
        return _lodash2.default.size(_lodash2.default.intersection(lines, _lodash2.default.map(pickle.locations, 'line'))) > 0;
      } else {
        return true;
      }
    }
  }, {
    key: 'matchesAnyName',
    value: function matchesAnyName(pickle) {
      if (this.names.length === 0) {
        return true;
      }
      return _lodash2.default.some(this.names, function (name) {
        return pickle.name.match(name);
      });
    }
  }, {
    key: 'matchesAllTagExpressions',
    value: function matchesAllTagExpressions(pickle) {
      if (!this.tagExpressionNode) {
        return true;
      }
      return this.tagExpressionNode.evaluate(_lodash2.default.map(pickle.tags, 'name'));
    }
  }]);
  return PickleFilter;
}();

exports.default = PickleFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9waWNrbGVfZmlsdGVyLmpzIl0sIm5hbWVzIjpbIkZFQVRVUkVfTElORU5VTV9SRUdFWFAiLCJ0YWdFeHByZXNzaW9uUGFyc2VyIiwiUGlja2xlRmlsdGVyIiwiZmVhdHVyZVBhdGhzIiwibmFtZXMiLCJ0YWdFeHByZXNzaW9uIiwiZmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nIiwiZ2V0RmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nIiwidGFnRXhwcmVzc2lvbk5vZGUiLCJwYXJzZSIsIm1hcHBpbmciLCJmb3JFYWNoIiwibWF0Y2giLCJleGVjIiwiZmVhdHVyZVBhdGgiLCJ1cmkiLCJsaW5lc0V4cHJlc3Npb24iLCJzbGljZSIsInNwbGl0IiwibGluZSIsInB1c2giLCJwYXJzZUludCIsInBpY2tsZSIsIm1hdGNoZXNBbnlMaW5lIiwibWF0Y2hlc0FueU5hbWUiLCJtYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMiLCJsaW5lcyIsInNpemUiLCJpbnRlcnNlY3Rpb24iLCJtYXAiLCJsb2NhdGlvbnMiLCJsZW5ndGgiLCJzb21lIiwibmFtZSIsImV2YWx1YXRlIiwidGFncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSx5QkFBeUIsdUJBQS9CO0FBQ0EsSUFBTUMsc0JBQXNCLHFDQUE1Qjs7SUFFcUJDLFk7QUFDbkIsOEJBQW9EO0FBQUEsUUFBdENDLFlBQXNDLFFBQXRDQSxZQUFzQztBQUFBLFFBQXhCQyxLQUF3QixRQUF4QkEsS0FBd0I7QUFBQSxRQUFqQkMsYUFBaUIsUUFBakJBLGFBQWlCO0FBQUE7O0FBQ2xELFNBQUtDLHdCQUFMLEdBQWdDLEtBQUtDLDJCQUFMLENBQzlCSixnQkFBZ0IsRUFEYyxDQUFoQztBQUdBLFNBQUtDLEtBQUwsR0FBYUEsU0FBUyxFQUF0QjtBQUNBLFFBQUlDLGFBQUosRUFBbUI7QUFDakIsV0FBS0csaUJBQUwsR0FBeUJQLG9CQUFvQlEsS0FBcEIsQ0FBMEJKLGlCQUFpQixFQUEzQyxDQUF6QjtBQUNEO0FBQ0Y7Ozs7Z0RBRTJCRixZLEVBQWM7QUFDeEMsVUFBTU8sVUFBVSxFQUFoQjtBQUNBUCxtQkFBYVEsT0FBYixDQUFxQix1QkFBZTtBQUNsQyxZQUFNQyxRQUFRWix1QkFBdUJhLElBQXZCLENBQTRCQyxXQUE1QixDQUFkO0FBQ0EsWUFBSUYsS0FBSixFQUFXO0FBQ1QsY0FBTUcsTUFBTUgsTUFBTSxDQUFOLENBQVo7QUFDQSxjQUFNSSxrQkFBa0JKLE1BQU0sQ0FBTixDQUF4QjtBQUNBLGNBQUlJLGVBQUosRUFBcUI7QUFDbkIsZ0JBQUksQ0FBQ04sUUFBUUssR0FBUixDQUFMLEVBQW1CO0FBQ2pCTCxzQkFBUUssR0FBUixJQUFlLEVBQWY7QUFDRDtBQUNEQyw0QkFBZ0JDLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCQyxLQUF6QixDQUErQixHQUEvQixFQUFvQ1AsT0FBcEMsQ0FBNEMsVUFBU1EsSUFBVCxFQUFlO0FBQ3pEVCxzQkFBUUssR0FBUixFQUFhSyxJQUFiLENBQWtCQyxTQUFTRixJQUFULENBQWxCO0FBQ0QsYUFGRDtBQUdEO0FBQ0Y7QUFDRixPQWREO0FBZUEsYUFBT1QsT0FBUDtBQUNEOzs7bUNBRXdCO0FBQUEsVUFBZlksTUFBZSxTQUFmQSxNQUFlO0FBQUEsVUFBUFAsR0FBTyxTQUFQQSxHQUFPOztBQUN2QixhQUNFLEtBQUtRLGNBQUwsQ0FBb0IsRUFBRUQsY0FBRixFQUFVUCxRQUFWLEVBQXBCLEtBQ0EsS0FBS1MsY0FBTCxDQUFvQkYsTUFBcEIsQ0FEQSxJQUVBLEtBQUtHLHdCQUFMLENBQThCSCxNQUE5QixDQUhGO0FBS0Q7OzswQ0FFK0I7QUFBQSxVQUFmQSxNQUFlLFNBQWZBLE1BQWU7QUFBQSxVQUFQUCxHQUFPLFNBQVBBLEdBQU87O0FBQzlCLFVBQU1XLFFBQVEsS0FBS3BCLHdCQUFMLENBQThCUyxHQUE5QixDQUFkO0FBQ0EsVUFBSVcsS0FBSixFQUFXO0FBQ1QsZUFBTyxpQkFBRUMsSUFBRixDQUFPLGlCQUFFQyxZQUFGLENBQWVGLEtBQWYsRUFBc0IsaUJBQUVHLEdBQUYsQ0FBTVAsT0FBT1EsU0FBYixFQUF3QixNQUF4QixDQUF0QixDQUFQLElBQWlFLENBQXhFO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTyxJQUFQO0FBQ0Q7QUFDRjs7O21DQUVjUixNLEVBQVE7QUFDckIsVUFBSSxLQUFLbEIsS0FBTCxDQUFXMkIsTUFBWCxLQUFzQixDQUExQixFQUE2QjtBQUMzQixlQUFPLElBQVA7QUFDRDtBQUNELGFBQU8saUJBQUVDLElBQUYsQ0FBTyxLQUFLNUIsS0FBWixFQUFtQixVQUFTNkIsSUFBVCxFQUFlO0FBQ3ZDLGVBQU9YLE9BQU9XLElBQVAsQ0FBWXJCLEtBQVosQ0FBa0JxQixJQUFsQixDQUFQO0FBQ0QsT0FGTSxDQUFQO0FBR0Q7Ozs2Q0FFd0JYLE0sRUFBUTtBQUMvQixVQUFJLENBQUMsS0FBS2QsaUJBQVYsRUFBNkI7QUFDM0IsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxhQUFPLEtBQUtBLGlCQUFMLENBQXVCMEIsUUFBdkIsQ0FBZ0MsaUJBQUVMLEdBQUYsQ0FBTVAsT0FBT2EsSUFBYixFQUFtQixNQUFuQixDQUFoQyxDQUFQO0FBQ0Q7Ozs7O2tCQTlEa0JqQyxZIiwiZmlsZSI6InBpY2tsZV9maWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgVGFnRXhwcmVzc2lvblBhcnNlciBmcm9tICdjdWN1bWJlci10YWctZXhwcmVzc2lvbnMvbGliL3RhZ19leHByZXNzaW9uX3BhcnNlcidcblxuY29uc3QgRkVBVFVSRV9MSU5FTlVNX1JFR0VYUCA9IC9eKC4qPykoKD86OltcXGRdKykrKT8kL1xuY29uc3QgdGFnRXhwcmVzc2lvblBhcnNlciA9IG5ldyBUYWdFeHByZXNzaW9uUGFyc2VyKClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGlja2xlRmlsdGVyIHtcbiAgY29uc3RydWN0b3IoeyBmZWF0dXJlUGF0aHMsIG5hbWVzLCB0YWdFeHByZXNzaW9uIH0pIHtcbiAgICB0aGlzLmZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyA9IHRoaXMuZ2V0RmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nKFxuICAgICAgZmVhdHVyZVBhdGhzIHx8IFtdXG4gICAgKVxuICAgIHRoaXMubmFtZXMgPSBuYW1lcyB8fCBbXVxuICAgIGlmICh0YWdFeHByZXNzaW9uKSB7XG4gICAgICB0aGlzLnRhZ0V4cHJlc3Npb25Ob2RlID0gdGFnRXhwcmVzc2lvblBhcnNlci5wYXJzZSh0YWdFeHByZXNzaW9uIHx8ICcnKVxuICAgIH1cbiAgfVxuXG4gIGdldEZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyhmZWF0dXJlUGF0aHMpIHtcbiAgICBjb25zdCBtYXBwaW5nID0ge31cbiAgICBmZWF0dXJlUGF0aHMuZm9yRWFjaChmZWF0dXJlUGF0aCA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IEZFQVRVUkVfTElORU5VTV9SRUdFWFAuZXhlYyhmZWF0dXJlUGF0aClcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCB1cmkgPSBtYXRjaFsxXVxuICAgICAgICBjb25zdCBsaW5lc0V4cHJlc3Npb24gPSBtYXRjaFsyXVxuICAgICAgICBpZiAobGluZXNFeHByZXNzaW9uKSB7XG4gICAgICAgICAgaWYgKCFtYXBwaW5nW3VyaV0pIHtcbiAgICAgICAgICAgIG1hcHBpbmdbdXJpXSA9IFtdXG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmVzRXhwcmVzc2lvbi5zbGljZSgxKS5zcGxpdCgnOicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgbWFwcGluZ1t1cmldLnB1c2gocGFyc2VJbnQobGluZSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIG1hcHBpbmdcbiAgfVxuXG4gIG1hdGNoZXMoeyBwaWNrbGUsIHVyaSB9KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMubWF0Y2hlc0FueUxpbmUoeyBwaWNrbGUsIHVyaSB9KSAmJlxuICAgICAgdGhpcy5tYXRjaGVzQW55TmFtZShwaWNrbGUpICYmXG4gICAgICB0aGlzLm1hdGNoZXNBbGxUYWdFeHByZXNzaW9ucyhwaWNrbGUpXG4gICAgKVxuICB9XG5cbiAgbWF0Y2hlc0FueUxpbmUoeyBwaWNrbGUsIHVyaSB9KSB7XG4gICAgY29uc3QgbGluZXMgPSB0aGlzLmZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZ1t1cmldXG4gICAgaWYgKGxpbmVzKSB7XG4gICAgICByZXR1cm4gXy5zaXplKF8uaW50ZXJzZWN0aW9uKGxpbmVzLCBfLm1hcChwaWNrbGUubG9jYXRpb25zLCAnbGluZScpKSkgPiAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgbWF0Y2hlc0FueU5hbWUocGlja2xlKSB7XG4gICAgaWYgKHRoaXMubmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gXy5zb21lKHRoaXMubmFtZXMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiBwaWNrbGUubmFtZS5tYXRjaChuYW1lKVxuICAgIH0pXG4gIH1cblxuICBtYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMocGlja2xlKSB7XG4gICAgaWYgKCF0aGlzLnRhZ0V4cHJlc3Npb25Ob2RlKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YWdFeHByZXNzaW9uTm9kZS5ldmFsdWF0ZShfLm1hcChwaWNrbGUudGFncywgJ25hbWUnKSlcbiAgfVxufVxuIl19