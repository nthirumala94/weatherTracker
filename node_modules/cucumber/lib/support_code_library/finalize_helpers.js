'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapDefinitions = wrapDefinitions;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utilArity = require('util-arity');

var _utilArity2 = _interopRequireDefault(_utilArity);

var _isGenerator = require('is-generator');

var _isGenerator2 = _interopRequireDefault(_isGenerator);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function wrapDefinitions(_ref) {
  var cwd = _ref.cwd,
      definitionFunctionWrapper = _ref.definitionFunctionWrapper,
      definitions = _ref.definitions;

  if (definitionFunctionWrapper) {
    definitions.forEach(function (definition) {
      var codeLength = definition.code.length;
      var wrappedFn = definitionFunctionWrapper(definition.code, definition.options.wrapperOptions);
      if (wrappedFn !== definition.code) {
        definition.code = (0, _utilArity2.default)(codeLength, wrappedFn);
      }
    });
  } else {
    var generatorDefinitions = _lodash2.default.filter(definitions, function (definition) {
      return _isGenerator2.default.fn(definition.code);
    });
    if (generatorDefinitions.length > 0) {
      var references = generatorDefinitions.map(function (definition) {
        return _path2.default.relative(cwd, definition.uri) + ':' + definition.line;
      }).join('\n  ');
      var message = '\n        The following hook/step definitions use generator functions:\n\n          ' + references + '\n\n        Use \'this.setDefinitionFunctionWrapper(fn)\' to wrap then in a function that returns a promise.\n        ';
      throw new Error(message);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdXBwb3J0X2NvZGVfbGlicmFyeS9maW5hbGl6ZV9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIndyYXBEZWZpbml0aW9ucyIsImN3ZCIsImRlZmluaXRpb25GdW5jdGlvbldyYXBwZXIiLCJkZWZpbml0aW9ucyIsImZvckVhY2giLCJjb2RlTGVuZ3RoIiwiZGVmaW5pdGlvbiIsImNvZGUiLCJsZW5ndGgiLCJ3cmFwcGVkRm4iLCJvcHRpb25zIiwid3JhcHBlck9wdGlvbnMiLCJnZW5lcmF0b3JEZWZpbml0aW9ucyIsImZpbHRlciIsImZuIiwicmVmZXJlbmNlcyIsIm1hcCIsInJlbGF0aXZlIiwidXJpIiwibGluZSIsImpvaW4iLCJtZXNzYWdlIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O1FBS2dCQSxlLEdBQUFBLGU7O0FBTGhCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFTyxTQUFTQSxlQUFULE9BSUo7QUFBQSxNQUhEQyxHQUdDLFFBSERBLEdBR0M7QUFBQSxNQUZEQyx5QkFFQyxRQUZEQSx5QkFFQztBQUFBLE1BRERDLFdBQ0MsUUFEREEsV0FDQzs7QUFDRCxNQUFJRCx5QkFBSixFQUErQjtBQUM3QkMsZ0JBQVlDLE9BQVosQ0FBb0Isc0JBQWM7QUFDaEMsVUFBTUMsYUFBYUMsV0FBV0MsSUFBWCxDQUFnQkMsTUFBbkM7QUFDQSxVQUFNQyxZQUFZUCwwQkFDaEJJLFdBQVdDLElBREssRUFFaEJELFdBQVdJLE9BQVgsQ0FBbUJDLGNBRkgsQ0FBbEI7QUFJQSxVQUFJRixjQUFjSCxXQUFXQyxJQUE3QixFQUFtQztBQUNqQ0QsbUJBQVdDLElBQVgsR0FBa0IseUJBQU1GLFVBQU4sRUFBa0JJLFNBQWxCLENBQWxCO0FBQ0Q7QUFDRixLQVREO0FBVUQsR0FYRCxNQVdPO0FBQ0wsUUFBTUcsdUJBQXVCLGlCQUFFQyxNQUFGLENBQVNWLFdBQVQsRUFBc0Isc0JBQWM7QUFDL0QsYUFBTyxzQkFBWVcsRUFBWixDQUFlUixXQUFXQyxJQUExQixDQUFQO0FBQ0QsS0FGNEIsQ0FBN0I7QUFHQSxRQUFJSyxxQkFBcUJKLE1BQXJCLEdBQThCLENBQWxDLEVBQXFDO0FBQ25DLFVBQU1PLGFBQWFILHFCQUNoQkksR0FEZ0IsQ0FDWixzQkFBYztBQUNqQixlQUFPLGVBQUtDLFFBQUwsQ0FBY2hCLEdBQWQsRUFBbUJLLFdBQVdZLEdBQTlCLElBQXFDLEdBQXJDLEdBQTJDWixXQUFXYSxJQUE3RDtBQUNELE9BSGdCLEVBSWhCQyxJQUpnQixDQUlYLE1BSlcsQ0FBbkI7QUFLQSxVQUFNQyxtR0FHQU4sVUFIQSwySEFBTjtBQU9BLFlBQU0sSUFBSU8sS0FBSixDQUFVRCxPQUFWLENBQU47QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoiZmluYWxpemVfaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCBhcml0eSBmcm9tICd1dGlsLWFyaXR5J1xuaW1wb3J0IGlzR2VuZXJhdG9yIGZyb20gJ2lzLWdlbmVyYXRvcidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwRGVmaW5pdGlvbnMoe1xuICBjd2QsXG4gIGRlZmluaXRpb25GdW5jdGlvbldyYXBwZXIsXG4gIGRlZmluaXRpb25zXG59KSB7XG4gIGlmIChkZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyKSB7XG4gICAgZGVmaW5pdGlvbnMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICAgIGNvbnN0IGNvZGVMZW5ndGggPSBkZWZpbml0aW9uLmNvZGUubGVuZ3RoXG4gICAgICBjb25zdCB3cmFwcGVkRm4gPSBkZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyKFxuICAgICAgICBkZWZpbml0aW9uLmNvZGUsXG4gICAgICAgIGRlZmluaXRpb24ub3B0aW9ucy53cmFwcGVyT3B0aW9uc1xuICAgICAgKVxuICAgICAgaWYgKHdyYXBwZWRGbiAhPT0gZGVmaW5pdGlvbi5jb2RlKSB7XG4gICAgICAgIGRlZmluaXRpb24uY29kZSA9IGFyaXR5KGNvZGVMZW5ndGgsIHdyYXBwZWRGbilcbiAgICAgIH1cbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGdlbmVyYXRvckRlZmluaXRpb25zID0gXy5maWx0ZXIoZGVmaW5pdGlvbnMsIGRlZmluaXRpb24gPT4ge1xuICAgICAgcmV0dXJuIGlzR2VuZXJhdG9yLmZuKGRlZmluaXRpb24uY29kZSlcbiAgICB9KVxuICAgIGlmIChnZW5lcmF0b3JEZWZpbml0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCByZWZlcmVuY2VzID0gZ2VuZXJhdG9yRGVmaW5pdGlvbnNcbiAgICAgICAgLm1hcChkZWZpbml0aW9uID0+IHtcbiAgICAgICAgICByZXR1cm4gcGF0aC5yZWxhdGl2ZShjd2QsIGRlZmluaXRpb24udXJpKSArICc6JyArIGRlZmluaXRpb24ubGluZVxuICAgICAgICB9KVxuICAgICAgICAuam9pbignXFxuICAnKVxuICAgICAgY29uc3QgbWVzc2FnZSA9IGBcbiAgICAgICAgVGhlIGZvbGxvd2luZyBob29rL3N0ZXAgZGVmaW5pdGlvbnMgdXNlIGdlbmVyYXRvciBmdW5jdGlvbnM6XG5cbiAgICAgICAgICAke3JlZmVyZW5jZXN9XG5cbiAgICAgICAgVXNlICd0aGlzLnNldERlZmluaXRpb25GdW5jdGlvbldyYXBwZXIoZm4pJyB0byB3cmFwIHRoZW4gaW4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlLlxuICAgICAgICBgXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==