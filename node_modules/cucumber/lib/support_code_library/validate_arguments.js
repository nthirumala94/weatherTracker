'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = validateArguments;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var optionsValidation = {
  expectedType: 'object or function',
  predicate: function predicate(_ref) {
    var options = _ref.options;

    return _lodash2.default.isPlainObject(options);
  }
};

var optionsTimeoutValidation = {
  identifier: '"options.timeout"',
  expectedType: 'integer',
  predicate: function predicate(_ref2) {
    var options = _ref2.options;

    return !options.timeout || _lodash2.default.isInteger(options.timeout);
  }
};

var fnValidation = {
  expectedType: 'function',
  predicate: function predicate(_ref3) {
    var code = _ref3.code;

    return _lodash2.default.isFunction(code);
  }
};

var validations = {
  defineTestRunHook: [(0, _extends3.default)({ identifier: 'first argument' }, optionsValidation), optionsTimeoutValidation, (0, _extends3.default)({ identifier: 'second argument' }, fnValidation)],
  defineTestCaseHook: [(0, _extends3.default)({ identifier: 'first argument' }, optionsValidation), {
    identifier: '"options.tags"',
    expectedType: 'string',
    predicate: function predicate(_ref4) {
      var options = _ref4.options;

      return !options.tags || _lodash2.default.isString(options.tags);
    }
  }, optionsTimeoutValidation, (0, _extends3.default)({ identifier: 'second argument' }, fnValidation)],
  defineStep: [{
    identifier: 'first argument',
    expectedType: 'string or regular expression',
    predicate: function predicate(_ref5) {
      var pattern = _ref5.pattern;

      return _lodash2.default.isRegExp(pattern) || _lodash2.default.isString(pattern);
    }
  }, (0, _extends3.default)({ identifier: 'second argument' }, optionsValidation), optionsTimeoutValidation, (0, _extends3.default)({ identifier: 'third argument' }, fnValidation)]
};

function validateArguments(_ref6) {
  var args = _ref6.args,
      fnName = _ref6.fnName,
      location = _ref6.location;

  validations[fnName].forEach(function (_ref7) {
    var identifier = _ref7.identifier,
        expectedType = _ref7.expectedType,
        predicate = _ref7.predicate;

    if (!predicate(args)) {
      throw new Error(location + ': Invalid ' + identifier + ': should be a ' + expectedType);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdXBwb3J0X2NvZGVfbGlicmFyeS92YWxpZGF0ZV9hcmd1bWVudHMuanMiXSwibmFtZXMiOlsidmFsaWRhdGVBcmd1bWVudHMiLCJvcHRpb25zVmFsaWRhdGlvbiIsImV4cGVjdGVkVHlwZSIsInByZWRpY2F0ZSIsIm9wdGlvbnMiLCJpc1BsYWluT2JqZWN0Iiwib3B0aW9uc1RpbWVvdXRWYWxpZGF0aW9uIiwiaWRlbnRpZmllciIsInRpbWVvdXQiLCJpc0ludGVnZXIiLCJmblZhbGlkYXRpb24iLCJjb2RlIiwiaXNGdW5jdGlvbiIsInZhbGlkYXRpb25zIiwiZGVmaW5lVGVzdFJ1bkhvb2siLCJkZWZpbmVUZXN0Q2FzZUhvb2siLCJ0YWdzIiwiaXNTdHJpbmciLCJkZWZpbmVTdGVwIiwicGF0dGVybiIsImlzUmVnRXhwIiwiYXJncyIsImZuTmFtZSIsImxvY2F0aW9uIiwiZm9yRWFjaCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2tCQXdEd0JBLGlCOztBQXhEeEI7Ozs7OztBQUVBLElBQU1DLG9CQUFvQjtBQUN4QkMsZ0JBQWMsb0JBRFU7QUFFeEJDLFdBRndCLDJCQUVEO0FBQUEsUUFBWEMsT0FBVyxRQUFYQSxPQUFXOztBQUNyQixXQUFPLGlCQUFFQyxhQUFGLENBQWdCRCxPQUFoQixDQUFQO0FBQ0Q7QUFKdUIsQ0FBMUI7O0FBT0EsSUFBTUUsMkJBQTJCO0FBQy9CQyxjQUFZLG1CQURtQjtBQUUvQkwsZ0JBQWMsU0FGaUI7QUFHL0JDLFdBSCtCLDRCQUdSO0FBQUEsUUFBWEMsT0FBVyxTQUFYQSxPQUFXOztBQUNyQixXQUFPLENBQUNBLFFBQVFJLE9BQVQsSUFBb0IsaUJBQUVDLFNBQUYsQ0FBWUwsUUFBUUksT0FBcEIsQ0FBM0I7QUFDRDtBQUw4QixDQUFqQzs7QUFRQSxJQUFNRSxlQUFlO0FBQ25CUixnQkFBYyxVQURLO0FBRW5CQyxXQUZtQiw0QkFFQztBQUFBLFFBQVJRLElBQVEsU0FBUkEsSUFBUTs7QUFDbEIsV0FBTyxpQkFBRUMsVUFBRixDQUFhRCxJQUFiLENBQVA7QUFDRDtBQUprQixDQUFyQjs7QUFPQSxJQUFNRSxjQUFjO0FBQ2xCQyxxQkFBbUIsMEJBQ2ZQLFlBQVksZ0JBREcsSUFDa0JOLGlCQURsQixHQUVqQkssd0JBRmlCLDJCQUdmQyxZQUFZLGlCQUhHLElBR21CRyxZQUhuQixFQUREO0FBTWxCSyxzQkFBb0IsMEJBQ2hCUixZQUFZLGdCQURJLElBQ2lCTixpQkFEakIsR0FFbEI7QUFDRU0sZ0JBQVksZ0JBRGQ7QUFFRUwsa0JBQWMsUUFGaEI7QUFHRUMsYUFIRiw0QkFHeUI7QUFBQSxVQUFYQyxPQUFXLFNBQVhBLE9BQVc7O0FBQ3JCLGFBQU8sQ0FBQ0EsUUFBUVksSUFBVCxJQUFpQixpQkFBRUMsUUFBRixDQUFXYixRQUFRWSxJQUFuQixDQUF4QjtBQUNEO0FBTEgsR0FGa0IsRUFTbEJWLHdCQVRrQiwyQkFVaEJDLFlBQVksaUJBVkksSUFVa0JHLFlBVmxCLEVBTkY7QUFrQmxCUSxjQUFZLENBQ1Y7QUFDRVgsZ0JBQVksZ0JBRGQ7QUFFRUwsa0JBQWMsOEJBRmhCO0FBR0VDLGFBSEYsNEJBR3lCO0FBQUEsVUFBWGdCLE9BQVcsU0FBWEEsT0FBVzs7QUFDckIsYUFBTyxpQkFBRUMsUUFBRixDQUFXRCxPQUFYLEtBQXVCLGlCQUFFRixRQUFGLENBQVdFLE9BQVgsQ0FBOUI7QUFDRDtBQUxILEdBRFUsMkJBUVJaLFlBQVksaUJBUkosSUFRMEJOLGlCQVIxQixHQVNWSyx3QkFUVSwyQkFVUkMsWUFBWSxnQkFWSixJQVV5QkcsWUFWekI7QUFsQk0sQ0FBcEI7O0FBZ0NlLFNBQVNWLGlCQUFULFFBQXVEO0FBQUEsTUFBMUJxQixJQUEwQixTQUExQkEsSUFBMEI7QUFBQSxNQUFwQkMsTUFBb0IsU0FBcEJBLE1BQW9CO0FBQUEsTUFBWkMsUUFBWSxTQUFaQSxRQUFZOztBQUNwRVYsY0FBWVMsTUFBWixFQUFvQkUsT0FBcEIsQ0FBNEIsaUJBQTZDO0FBQUEsUUFBMUNqQixVQUEwQyxTQUExQ0EsVUFBMEM7QUFBQSxRQUE5QkwsWUFBOEIsU0FBOUJBLFlBQThCO0FBQUEsUUFBaEJDLFNBQWdCLFNBQWhCQSxTQUFnQjs7QUFDdkUsUUFBSSxDQUFDQSxVQUFVa0IsSUFBVixDQUFMLEVBQXNCO0FBQ3BCLFlBQU0sSUFBSUksS0FBSixDQUNERixRQURDLGtCQUNvQmhCLFVBRHBCLHNCQUMrQ0wsWUFEL0MsQ0FBTjtBQUdEO0FBQ0YsR0FORDtBQU9EIiwiZmlsZSI6InZhbGlkYXRlX2FyZ3VtZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCdcblxuY29uc3Qgb3B0aW9uc1ZhbGlkYXRpb24gPSB7XG4gIGV4cGVjdGVkVHlwZTogJ29iamVjdCBvciBmdW5jdGlvbicsXG4gIHByZWRpY2F0ZSh7IG9wdGlvbnMgfSkge1xuICAgIHJldHVybiBfLmlzUGxhaW5PYmplY3Qob3B0aW9ucylcbiAgfVxufVxuXG5jb25zdCBvcHRpb25zVGltZW91dFZhbGlkYXRpb24gPSB7XG4gIGlkZW50aWZpZXI6ICdcIm9wdGlvbnMudGltZW91dFwiJyxcbiAgZXhwZWN0ZWRUeXBlOiAnaW50ZWdlcicsXG4gIHByZWRpY2F0ZSh7IG9wdGlvbnMgfSkge1xuICAgIHJldHVybiAhb3B0aW9ucy50aW1lb3V0IHx8IF8uaXNJbnRlZ2VyKG9wdGlvbnMudGltZW91dClcbiAgfVxufVxuXG5jb25zdCBmblZhbGlkYXRpb24gPSB7XG4gIGV4cGVjdGVkVHlwZTogJ2Z1bmN0aW9uJyxcbiAgcHJlZGljYXRlKHsgY29kZSB9KSB7XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbihjb2RlKVxuICB9XG59XG5cbmNvbnN0IHZhbGlkYXRpb25zID0ge1xuICBkZWZpbmVUZXN0UnVuSG9vazogW1xuICAgIHsgaWRlbnRpZmllcjogJ2ZpcnN0IGFyZ3VtZW50JywgLi4ub3B0aW9uc1ZhbGlkYXRpb24gfSxcbiAgICBvcHRpb25zVGltZW91dFZhbGlkYXRpb24sXG4gICAgeyBpZGVudGlmaWVyOiAnc2Vjb25kIGFyZ3VtZW50JywgLi4uZm5WYWxpZGF0aW9uIH1cbiAgXSxcbiAgZGVmaW5lVGVzdENhc2VIb29rOiBbXG4gICAgeyBpZGVudGlmaWVyOiAnZmlyc3QgYXJndW1lbnQnLCAuLi5vcHRpb25zVmFsaWRhdGlvbiB9LFxuICAgIHtcbiAgICAgIGlkZW50aWZpZXI6ICdcIm9wdGlvbnMudGFnc1wiJyxcbiAgICAgIGV4cGVjdGVkVHlwZTogJ3N0cmluZycsXG4gICAgICBwcmVkaWNhdGUoeyBvcHRpb25zIH0pIHtcbiAgICAgICAgcmV0dXJuICFvcHRpb25zLnRhZ3MgfHwgXy5pc1N0cmluZyhvcHRpb25zLnRhZ3MpXG4gICAgICB9XG4gICAgfSxcbiAgICBvcHRpb25zVGltZW91dFZhbGlkYXRpb24sXG4gICAgeyBpZGVudGlmaWVyOiAnc2Vjb25kIGFyZ3VtZW50JywgLi4uZm5WYWxpZGF0aW9uIH1cbiAgXSxcbiAgZGVmaW5lU3RlcDogW1xuICAgIHtcbiAgICAgIGlkZW50aWZpZXI6ICdmaXJzdCBhcmd1bWVudCcsXG4gICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcgb3IgcmVndWxhciBleHByZXNzaW9uJyxcbiAgICAgIHByZWRpY2F0ZSh7IHBhdHRlcm4gfSkge1xuICAgICAgICByZXR1cm4gXy5pc1JlZ0V4cChwYXR0ZXJuKSB8fCBfLmlzU3RyaW5nKHBhdHRlcm4pXG4gICAgICB9XG4gICAgfSxcbiAgICB7IGlkZW50aWZpZXI6ICdzZWNvbmQgYXJndW1lbnQnLCAuLi5vcHRpb25zVmFsaWRhdGlvbiB9LFxuICAgIG9wdGlvbnNUaW1lb3V0VmFsaWRhdGlvbixcbiAgICB7IGlkZW50aWZpZXI6ICd0aGlyZCBhcmd1bWVudCcsIC4uLmZuVmFsaWRhdGlvbiB9XG4gIF1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGVBcmd1bWVudHMoeyBhcmdzLCBmbk5hbWUsIGxvY2F0aW9uIH0pIHtcbiAgdmFsaWRhdGlvbnNbZm5OYW1lXS5mb3JFYWNoKCh7IGlkZW50aWZpZXIsIGV4cGVjdGVkVHlwZSwgcHJlZGljYXRlIH0pID0+IHtcbiAgICBpZiAoIXByZWRpY2F0ZShhcmdzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHtsb2NhdGlvbn06IEludmFsaWQgJHtpZGVudGlmaWVyfTogc2hvdWxkIGJlIGEgJHtleHBlY3RlZFR5cGV9YFxuICAgICAgKVxuICAgIH1cbiAgfSlcbn1cbiJdfQ==