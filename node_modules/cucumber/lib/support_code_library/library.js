'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupportCodeLibraryBuilder = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _parameter_type_registry_builder = require('./parameter_type_registry_builder');

var _parameter_type_registry_builder2 = _interopRequireDefault(_parameter_type_registry_builder);

var _define_helpers = require('./define_helpers');

var _finalize_helpers = require('./finalize_helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SupportCodeLibraryBuilder = exports.SupportCodeLibraryBuilder = function () {
  function SupportCodeLibraryBuilder() {
    var _this = this;

    (0, _classCallCheck3.default)(this, SupportCodeLibraryBuilder);

    this.methods = {
      addTransform: (0, _define_helpers.addTransform)(this),
      defineParameterType: (0, _define_helpers.defineParameterType)(this),
      After: (0, _define_helpers.defineScenarioHook)(this, 'afterScenarioHookDefinitions'),
      AfterAll: (0, _define_helpers.defineFeaturesHook)(this, 'afterFeaturesHookDefinitions'),
      Before: (0, _define_helpers.defineScenarioHook)(this, 'beforeScenarioHookDefinitions'),
      BeforeAll: (0, _define_helpers.defineFeaturesHook)(this, 'beforeFeaturesHookDefinitions'),
      defineSupportCode: function defineSupportCode(fn) {
        fn(_this.methods());
      },
      defineStep: (0, _define_helpers.defineStep)(this),
      registerHandler: (0, _define_helpers.registerHandler)(this),
      registerListener: function registerListener(listener) {
        _this.options.listeners.push(listener);
      },
      setDefaultTimeout: function setDefaultTimeout(milliseconds) {
        _this.options.defaultTimeout = milliseconds;
      },
      setDefinitionFunctionWrapper: function setDefinitionFunctionWrapper(fn) {
        _this.options.definitionFunctionWrapper = fn;
      },
      setWorldConstructor: function setWorldConstructor(fn) {
        _this.options.World = fn;
      }
    };
    this.methods.Given = this.methods.When = this.methods.Then = this.methods.defineStep;
  }

  (0, _createClass3.default)(SupportCodeLibraryBuilder, [{
    key: 'finalize',
    value: function finalize() {
      var _this2 = this;

      (0, _finalize_helpers.wrapDefinitions)({
        cwd: this.cwd,
        definitionFunctionWrapper: this.definitionFunctionWrapper,
        definitions: _lodash2.default.chain(['afterFeaturesHook', 'afterScenarioHook', 'beforeFeaturesHook', 'beforeScenarioHook', 'step']).map(function (key) {
          return _this2.options[key + 'Definitions'];
        }).flatten().value()
      });
      this.options.afterScenarioHookDefinitions.reverse();
      this.options.afterFeaturesHookDefinitions.reverse();
      return this.options;
    }
  }, {
    key: 'reset',
    value: function reset(cwd) {
      this.cwd = cwd;
      this.options = _lodash2.default.cloneDeep({
        afterFeaturesHookDefinitions: [],
        afterScenarioHookDefinitions: [],
        beforeFeaturesHookDefinitions: [],
        beforeScenarioHookDefinitions: [],
        defaultTimeout: 5000,
        definitionFunctionWrapper: null,
        listeners: [],
        stepDefinitions: [],
        parameterTypeRegistry: _parameter_type_registry_builder2.default.build(),
        World: function World(_ref) {
          var attach = _ref.attach,
              parameters = _ref.parameters;

          this.attach = attach;
          this.parameters = parameters;
        }
      });
    }
  }]);
  return SupportCodeLibraryBuilder;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdXBwb3J0X2NvZGVfbGlicmFyeS9saWJyYXJ5LmpzIl0sIm5hbWVzIjpbIlN1cHBvcnRDb2RlTGlicmFyeUJ1aWxkZXIiLCJtZXRob2RzIiwiYWRkVHJhbnNmb3JtIiwiZGVmaW5lUGFyYW1ldGVyVHlwZSIsIkFmdGVyIiwiQWZ0ZXJBbGwiLCJCZWZvcmUiLCJCZWZvcmVBbGwiLCJkZWZpbmVTdXBwb3J0Q29kZSIsImZuIiwiZGVmaW5lU3RlcCIsInJlZ2lzdGVySGFuZGxlciIsInJlZ2lzdGVyTGlzdGVuZXIiLCJvcHRpb25zIiwibGlzdGVuZXJzIiwicHVzaCIsImxpc3RlbmVyIiwic2V0RGVmYXVsdFRpbWVvdXQiLCJkZWZhdWx0VGltZW91dCIsIm1pbGxpc2Vjb25kcyIsInNldERlZmluaXRpb25GdW5jdGlvbldyYXBwZXIiLCJkZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyIiwic2V0V29ybGRDb25zdHJ1Y3RvciIsIldvcmxkIiwiR2l2ZW4iLCJXaGVuIiwiVGhlbiIsImN3ZCIsImRlZmluaXRpb25zIiwiY2hhaW4iLCJtYXAiLCJrZXkiLCJmbGF0dGVuIiwidmFsdWUiLCJhZnRlclNjZW5hcmlvSG9va0RlZmluaXRpb25zIiwicmV2ZXJzZSIsImFmdGVyRmVhdHVyZXNIb29rRGVmaW5pdGlvbnMiLCJjbG9uZURlZXAiLCJiZWZvcmVGZWF0dXJlc0hvb2tEZWZpbml0aW9ucyIsImJlZm9yZVNjZW5hcmlvSG9va0RlZmluaXRpb25zIiwic3RlcERlZmluaXRpb25zIiwicGFyYW1ldGVyVHlwZVJlZ2lzdHJ5IiwiYnVpbGQiLCJhdHRhY2giLCJwYXJhbWV0ZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0FBUUE7Ozs7SUFFYUEseUIsV0FBQUEseUI7QUFDWCx1Q0FBYztBQUFBOztBQUFBOztBQUNaLFNBQUtDLE9BQUwsR0FBZTtBQUNiQyxvQkFBYyxrQ0FBYSxJQUFiLENBREQ7QUFFYkMsMkJBQXFCLHlDQUFvQixJQUFwQixDQUZSO0FBR2JDLGFBQU8sd0NBQW1CLElBQW5CLEVBQXlCLDhCQUF6QixDQUhNO0FBSWJDLGdCQUFVLHdDQUFtQixJQUFuQixFQUF5Qiw4QkFBekIsQ0FKRztBQUtiQyxjQUFRLHdDQUFtQixJQUFuQixFQUF5QiwrQkFBekIsQ0FMSztBQU1iQyxpQkFBVyx3Q0FBbUIsSUFBbkIsRUFBeUIsK0JBQXpCLENBTkU7QUFPYkMseUJBQW1CLCtCQUFNO0FBQ3ZCQyxXQUFHLE1BQUtSLE9BQUwsRUFBSDtBQUNELE9BVFk7QUFVYlMsa0JBQVksZ0NBQVcsSUFBWCxDQVZDO0FBV2JDLHVCQUFpQixxQ0FBZ0IsSUFBaEIsQ0FYSjtBQVliQyx3QkFBa0Isb0NBQVk7QUFDNUIsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLENBQXVCQyxJQUF2QixDQUE0QkMsUUFBNUI7QUFDRCxPQWRZO0FBZWJDLHlCQUFtQix5Q0FBZ0I7QUFDakMsY0FBS0osT0FBTCxDQUFhSyxjQUFiLEdBQThCQyxZQUE5QjtBQUNELE9BakJZO0FBa0JiQyxvQ0FBOEIsMENBQU07QUFDbEMsY0FBS1AsT0FBTCxDQUFhUSx5QkFBYixHQUF5Q1osRUFBekM7QUFDRCxPQXBCWTtBQXFCYmEsMkJBQXFCLGlDQUFNO0FBQ3pCLGNBQUtULE9BQUwsQ0FBYVUsS0FBYixHQUFxQmQsRUFBckI7QUFDRDtBQXZCWSxLQUFmO0FBeUJBLFNBQUtSLE9BQUwsQ0FBYXVCLEtBQWIsR0FBcUIsS0FBS3ZCLE9BQUwsQ0FBYXdCLElBQWIsR0FBb0IsS0FBS3hCLE9BQUwsQ0FBYXlCLElBQWIsR0FBb0IsS0FBS3pCLE9BQUwsQ0FBYVMsVUFBMUU7QUFDRDs7OzsrQkFFVTtBQUFBOztBQUNULDZDQUFnQjtBQUNkaUIsYUFBSyxLQUFLQSxHQURJO0FBRWROLG1DQUEyQixLQUFLQSx5QkFGbEI7QUFHZE8scUJBQWEsaUJBQUVDLEtBQUYsQ0FBUSxDQUNuQixtQkFEbUIsRUFFbkIsbUJBRm1CLEVBR25CLG9CQUhtQixFQUluQixvQkFKbUIsRUFLbkIsTUFMbUIsQ0FBUixFQU9WQyxHQVBVLENBT047QUFBQSxpQkFBTyxPQUFLakIsT0FBTCxDQUFha0IsTUFBTSxhQUFuQixDQUFQO0FBQUEsU0FQTSxFQVFWQyxPQVJVLEdBU1ZDLEtBVFU7QUFIQyxPQUFoQjtBQWNBLFdBQUtwQixPQUFMLENBQWFxQiw0QkFBYixDQUEwQ0MsT0FBMUM7QUFDQSxXQUFLdEIsT0FBTCxDQUFhdUIsNEJBQWIsQ0FBMENELE9BQTFDO0FBQ0EsYUFBTyxLQUFLdEIsT0FBWjtBQUNEOzs7MEJBRUtjLEcsRUFBSztBQUNULFdBQUtBLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFdBQUtkLE9BQUwsR0FBZSxpQkFBRXdCLFNBQUYsQ0FBWTtBQUN6QkQsc0NBQThCLEVBREw7QUFFekJGLHNDQUE4QixFQUZMO0FBR3pCSSx1Q0FBK0IsRUFITjtBQUl6QkMsdUNBQStCLEVBSk47QUFLekJyQix3QkFBZ0IsSUFMUztBQU16QkcsbUNBQTJCLElBTkY7QUFPekJQLG1CQUFXLEVBUGM7QUFRekIwQix5QkFBaUIsRUFSUTtBQVN6QkMsK0JBQXVCLDBDQUF1QkMsS0FBdkIsRUFURTtBQVV6Qm5CLGFBVnlCLHVCQVVLO0FBQUEsY0FBdEJvQixNQUFzQixRQUF0QkEsTUFBc0I7QUFBQSxjQUFkQyxVQUFjLFFBQWRBLFVBQWM7O0FBQzVCLGVBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBLGVBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0Q7QUFid0IsT0FBWixDQUFmO0FBZUQiLCJmaWxlIjoibGlicmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCBUcmFuc2Zvcm1Mb29rdXBCdWlsZGVyIGZyb20gJy4vcGFyYW1ldGVyX3R5cGVfcmVnaXN0cnlfYnVpbGRlcidcbmltcG9ydCB7XG4gIGFkZFRyYW5zZm9ybSxcbiAgZGVmaW5lRmVhdHVyZXNIb29rLFxuICBkZWZpbmVQYXJhbWV0ZXJUeXBlLFxuICBkZWZpbmVTY2VuYXJpb0hvb2ssXG4gIGRlZmluZVN0ZXAsXG4gIHJlZ2lzdGVySGFuZGxlclxufSBmcm9tICcuL2RlZmluZV9oZWxwZXJzJ1xuaW1wb3J0IHsgd3JhcERlZmluaXRpb25zIH0gZnJvbSAnLi9maW5hbGl6ZV9oZWxwZXJzJ1xuXG5leHBvcnQgY2xhc3MgU3VwcG9ydENvZGVMaWJyYXJ5QnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWV0aG9kcyA9IHtcbiAgICAgIGFkZFRyYW5zZm9ybTogYWRkVHJhbnNmb3JtKHRoaXMpLFxuICAgICAgZGVmaW5lUGFyYW1ldGVyVHlwZTogZGVmaW5lUGFyYW1ldGVyVHlwZSh0aGlzKSxcbiAgICAgIEFmdGVyOiBkZWZpbmVTY2VuYXJpb0hvb2sodGhpcywgJ2FmdGVyU2NlbmFyaW9Ib29rRGVmaW5pdGlvbnMnKSxcbiAgICAgIEFmdGVyQWxsOiBkZWZpbmVGZWF0dXJlc0hvb2sodGhpcywgJ2FmdGVyRmVhdHVyZXNIb29rRGVmaW5pdGlvbnMnKSxcbiAgICAgIEJlZm9yZTogZGVmaW5lU2NlbmFyaW9Ib29rKHRoaXMsICdiZWZvcmVTY2VuYXJpb0hvb2tEZWZpbml0aW9ucycpLFxuICAgICAgQmVmb3JlQWxsOiBkZWZpbmVGZWF0dXJlc0hvb2sodGhpcywgJ2JlZm9yZUZlYXR1cmVzSG9va0RlZmluaXRpb25zJyksXG4gICAgICBkZWZpbmVTdXBwb3J0Q29kZTogZm4gPT4ge1xuICAgICAgICBmbih0aGlzLm1ldGhvZHMoKSlcbiAgICAgIH0sXG4gICAgICBkZWZpbmVTdGVwOiBkZWZpbmVTdGVwKHRoaXMpLFxuICAgICAgcmVnaXN0ZXJIYW5kbGVyOiByZWdpc3RlckhhbmRsZXIodGhpcyksXG4gICAgICByZWdpc3Rlckxpc3RlbmVyOiBsaXN0ZW5lciA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcilcbiAgICAgIH0sXG4gICAgICBzZXREZWZhdWx0VGltZW91dDogbWlsbGlzZWNvbmRzID0+IHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRlZmF1bHRUaW1lb3V0ID0gbWlsbGlzZWNvbmRzXG4gICAgICB9LFxuICAgICAgc2V0RGVmaW5pdGlvbkZ1bmN0aW9uV3JhcHBlcjogZm4gPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGVmaW5pdGlvbkZ1bmN0aW9uV3JhcHBlciA9IGZuXG4gICAgICB9LFxuICAgICAgc2V0V29ybGRDb25zdHJ1Y3RvcjogZm4gPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbnMuV29ybGQgPSBmblxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZHMuR2l2ZW4gPSB0aGlzLm1ldGhvZHMuV2hlbiA9IHRoaXMubWV0aG9kcy5UaGVuID0gdGhpcy5tZXRob2RzLmRlZmluZVN0ZXBcbiAgfVxuXG4gIGZpbmFsaXplKCkge1xuICAgIHdyYXBEZWZpbml0aW9ucyh7XG4gICAgICBjd2Q6IHRoaXMuY3dkLFxuICAgICAgZGVmaW5pdGlvbkZ1bmN0aW9uV3JhcHBlcjogdGhpcy5kZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyLFxuICAgICAgZGVmaW5pdGlvbnM6IF8uY2hhaW4oW1xuICAgICAgICAnYWZ0ZXJGZWF0dXJlc0hvb2snLFxuICAgICAgICAnYWZ0ZXJTY2VuYXJpb0hvb2snLFxuICAgICAgICAnYmVmb3JlRmVhdHVyZXNIb29rJyxcbiAgICAgICAgJ2JlZm9yZVNjZW5hcmlvSG9vaycsXG4gICAgICAgICdzdGVwJ1xuICAgICAgXSlcbiAgICAgICAgLm1hcChrZXkgPT4gdGhpcy5vcHRpb25zW2tleSArICdEZWZpbml0aW9ucyddKVxuICAgICAgICAuZmxhdHRlbigpXG4gICAgICAgIC52YWx1ZSgpXG4gICAgfSlcbiAgICB0aGlzLm9wdGlvbnMuYWZ0ZXJTY2VuYXJpb0hvb2tEZWZpbml0aW9ucy5yZXZlcnNlKClcbiAgICB0aGlzLm9wdGlvbnMuYWZ0ZXJGZWF0dXJlc0hvb2tEZWZpbml0aW9ucy5yZXZlcnNlKClcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zXG4gIH1cblxuICByZXNldChjd2QpIHtcbiAgICB0aGlzLmN3ZCA9IGN3ZFxuICAgIHRoaXMub3B0aW9ucyA9IF8uY2xvbmVEZWVwKHtcbiAgICAgIGFmdGVyRmVhdHVyZXNIb29rRGVmaW5pdGlvbnM6IFtdLFxuICAgICAgYWZ0ZXJTY2VuYXJpb0hvb2tEZWZpbml0aW9uczogW10sXG4gICAgICBiZWZvcmVGZWF0dXJlc0hvb2tEZWZpbml0aW9uczogW10sXG4gICAgICBiZWZvcmVTY2VuYXJpb0hvb2tEZWZpbml0aW9uczogW10sXG4gICAgICBkZWZhdWx0VGltZW91dDogNTAwMCxcbiAgICAgIGRlZmluaXRpb25GdW5jdGlvbldyYXBwZXI6IG51bGwsXG4gICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgc3RlcERlZmluaXRpb25zOiBbXSxcbiAgICAgIHBhcmFtZXRlclR5cGVSZWdpc3RyeTogVHJhbnNmb3JtTG9va3VwQnVpbGRlci5idWlsZCgpLFxuICAgICAgV29ybGQoeyBhdHRhY2gsIHBhcmFtZXRlcnMgfSkge1xuICAgICAgICB0aGlzLmF0dGFjaCA9IGF0dGFjaFxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl19