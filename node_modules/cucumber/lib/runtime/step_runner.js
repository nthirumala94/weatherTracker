'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var run = function () {
  var _ref2 = (0, _bluebird.coroutine)(function* (_ref) {
    var defaultTimeout = _ref.defaultTimeout,
        hookParameter = _ref.hookParameter,
        parameterTypeRegistry = _ref.parameterTypeRegistry,
        step = _ref.step,
        stepDefinition = _ref.stepDefinition,
        world = _ref.world;

    beginTiming();
    var error = void 0,
        result = void 0,
        parameters = void 0;

    try {
      parameters = yield _bluebird2.default.all(stepDefinition.getInvocationParameters({
        hookParameter: hookParameter,
        parameterTypeRegistry: parameterTypeRegistry,
        step: step
      }));
    } catch (err) {
      error = err;
    }

    if (!error) {
      var timeoutInMilliseconds = stepDefinition.options.timeout || defaultTimeout;

      var validCodeLengths = stepDefinition.getValidCodeLengths(parameters);
      if (_lodash2.default.includes(validCodeLengths, stepDefinition.code.length)) {
        var data = yield _user_code_runner2.default.run({
          argsArray: parameters,
          fn: stepDefinition.code,
          thisArg: world,
          timeoutInMilliseconds: timeoutInMilliseconds
        });
        error = data.error;
        result = data.result;
      } else {
        error = stepDefinition.getInvalidCodeLengthMessage(parameters);
      }
    }

    var testStepResult = { duration: endTiming() };

    if (result === 'pending') {
      testStepResult.status = _status2.default.PENDING;
    } else if (error) {
      testStepResult.exception = error;
      testStepResult.status = _status2.default.FAILED;
    } else {
      testStepResult.status = _status2.default.PASSED;
    }

    return testStepResult;
  });

  return function run(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _time = require('../time');

var _time2 = _interopRequireDefault(_time);

var _user_code_runner = require('../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var beginTiming = _time2.default.beginTiming,
    endTiming = _time2.default.endTiming;
exports.default = { run: run };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL3N0ZXBfcnVubmVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRUaW1lb3V0IiwiaG9va1BhcmFtZXRlciIsInBhcmFtZXRlclR5cGVSZWdpc3RyeSIsInN0ZXAiLCJzdGVwRGVmaW5pdGlvbiIsIndvcmxkIiwiYmVnaW5UaW1pbmciLCJlcnJvciIsInJlc3VsdCIsInBhcmFtZXRlcnMiLCJhbGwiLCJnZXRJbnZvY2F0aW9uUGFyYW1ldGVycyIsImVyciIsInRpbWVvdXRJbk1pbGxpc2Vjb25kcyIsIm9wdGlvbnMiLCJ0aW1lb3V0IiwidmFsaWRDb2RlTGVuZ3RocyIsImdldFZhbGlkQ29kZUxlbmd0aHMiLCJpbmNsdWRlcyIsImNvZGUiLCJsZW5ndGgiLCJkYXRhIiwicnVuIiwiYXJnc0FycmF5IiwiZm4iLCJ0aGlzQXJnIiwiZ2V0SW52YWxpZENvZGVMZW5ndGhNZXNzYWdlIiwidGVzdFN0ZXBSZXN1bHQiLCJkdXJhdGlvbiIsImVuZFRpbWluZyIsInN0YXR1cyIsIlBFTkRJTkciLCJleGNlcHRpb24iLCJGQUlMRUQiLCJQQVNTRUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O3VDQVFBLGlCQU9HO0FBQUEsUUFOREEsY0FNQyxRQU5EQSxjQU1DO0FBQUEsUUFMREMsYUFLQyxRQUxEQSxhQUtDO0FBQUEsUUFKREMscUJBSUMsUUFKREEscUJBSUM7QUFBQSxRQUhEQyxJQUdDLFFBSERBLElBR0M7QUFBQSxRQUZEQyxjQUVDLFFBRkRBLGNBRUM7QUFBQSxRQUREQyxLQUNDLFFBRERBLEtBQ0M7O0FBQ0RDO0FBQ0EsUUFBSUMsY0FBSjtBQUFBLFFBQVdDLGVBQVg7QUFBQSxRQUFtQkMsbUJBQW5COztBQUVBLFFBQUk7QUFDRkEsbUJBQWEsTUFBTSxtQkFBUUMsR0FBUixDQUNqQk4sZUFBZU8sdUJBQWYsQ0FBdUM7QUFDckNWLG9DQURxQztBQUVyQ0Msb0RBRnFDO0FBR3JDQztBQUhxQyxPQUF2QyxDQURpQixDQUFuQjtBQU9ELEtBUkQsQ0FRRSxPQUFPUyxHQUFQLEVBQVk7QUFDWkwsY0FBUUssR0FBUjtBQUNEOztBQUVELFFBQUksQ0FBQ0wsS0FBTCxFQUFZO0FBQ1YsVUFBTU0sd0JBQ0pULGVBQWVVLE9BQWYsQ0FBdUJDLE9BQXZCLElBQWtDZixjQURwQzs7QUFHQSxVQUFNZ0IsbUJBQW1CWixlQUFlYSxtQkFBZixDQUFtQ1IsVUFBbkMsQ0FBekI7QUFDQSxVQUFJLGlCQUFFUyxRQUFGLENBQVdGLGdCQUFYLEVBQTZCWixlQUFlZSxJQUFmLENBQW9CQyxNQUFqRCxDQUFKLEVBQThEO0FBQzVELFlBQU1DLE9BQU8sTUFBTSwyQkFBZUMsR0FBZixDQUFtQjtBQUNwQ0MscUJBQVdkLFVBRHlCO0FBRXBDZSxjQUFJcEIsZUFBZWUsSUFGaUI7QUFHcENNLG1CQUFTcEIsS0FIMkI7QUFJcENRO0FBSm9DLFNBQW5CLENBQW5CO0FBTUFOLGdCQUFRYyxLQUFLZCxLQUFiO0FBQ0FDLGlCQUFTYSxLQUFLYixNQUFkO0FBQ0QsT0FURCxNQVNPO0FBQ0xELGdCQUFRSCxlQUFlc0IsMkJBQWYsQ0FBMkNqQixVQUEzQyxDQUFSO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNa0IsaUJBQWlCLEVBQUVDLFVBQVVDLFdBQVosRUFBdkI7O0FBRUEsUUFBSXJCLFdBQVcsU0FBZixFQUEwQjtBQUN4Qm1CLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPQyxPQUEvQjtBQUNELEtBRkQsTUFFTyxJQUFJeEIsS0FBSixFQUFXO0FBQ2hCb0IscUJBQWVLLFNBQWYsR0FBMkJ6QixLQUEzQjtBQUNBb0IscUJBQWVHLE1BQWYsR0FBd0IsaUJBQU9HLE1BQS9CO0FBQ0QsS0FITSxNQUdBO0FBQ0xOLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPSSxNQUEvQjtBQUNEOztBQUVELFdBQU9QLGNBQVA7QUFDRCxHOztrQkF0RGNMLEc7Ozs7O0FBUmY7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztJQUdRaEIsVyxrQkFBQUEsVztJQUFhdUIsUyxrQkFBQUEsUztrQkEwRE4sRUFBRVAsUUFBRixFIiwiZmlsZSI6InN0ZXBfcnVubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFN0YXR1cyBmcm9tICcuLi9zdGF0dXMnXG5pbXBvcnQgVGltZSBmcm9tICcuLi90aW1lJ1xuaW1wb3J0IFVzZXJDb2RlUnVubmVyIGZyb20gJy4uL3VzZXJfY29kZV9ydW5uZXInXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcblxuY29uc3QgeyBiZWdpblRpbWluZywgZW5kVGltaW5nIH0gPSBUaW1lXG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bih7XG4gIGRlZmF1bHRUaW1lb3V0LFxuICBob29rUGFyYW1ldGVyLFxuICBwYXJhbWV0ZXJUeXBlUmVnaXN0cnksXG4gIHN0ZXAsXG4gIHN0ZXBEZWZpbml0aW9uLFxuICB3b3JsZFxufSkge1xuICBiZWdpblRpbWluZygpXG4gIGxldCBlcnJvciwgcmVzdWx0LCBwYXJhbWV0ZXJzXG5cbiAgdHJ5IHtcbiAgICBwYXJhbWV0ZXJzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBzdGVwRGVmaW5pdGlvbi5nZXRJbnZvY2F0aW9uUGFyYW1ldGVycyh7XG4gICAgICAgIGhvb2tQYXJhbWV0ZXIsXG4gICAgICAgIHBhcmFtZXRlclR5cGVSZWdpc3RyeSxcbiAgICAgICAgc3RlcFxuICAgICAgfSlcbiAgICApXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBpZiAoIWVycm9yKSB7XG4gICAgY29uc3QgdGltZW91dEluTWlsbGlzZWNvbmRzID1cbiAgICAgIHN0ZXBEZWZpbml0aW9uLm9wdGlvbnMudGltZW91dCB8fCBkZWZhdWx0VGltZW91dFxuXG4gICAgY29uc3QgdmFsaWRDb2RlTGVuZ3RocyA9IHN0ZXBEZWZpbml0aW9uLmdldFZhbGlkQ29kZUxlbmd0aHMocGFyYW1ldGVycylcbiAgICBpZiAoXy5pbmNsdWRlcyh2YWxpZENvZGVMZW5ndGhzLCBzdGVwRGVmaW5pdGlvbi5jb2RlLmxlbmd0aCkpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBVc2VyQ29kZVJ1bm5lci5ydW4oe1xuICAgICAgICBhcmdzQXJyYXk6IHBhcmFtZXRlcnMsXG4gICAgICAgIGZuOiBzdGVwRGVmaW5pdGlvbi5jb2RlLFxuICAgICAgICB0aGlzQXJnOiB3b3JsZCxcbiAgICAgICAgdGltZW91dEluTWlsbGlzZWNvbmRzXG4gICAgICB9KVxuICAgICAgZXJyb3IgPSBkYXRhLmVycm9yXG4gICAgICByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciA9IHN0ZXBEZWZpbml0aW9uLmdldEludmFsaWRDb2RlTGVuZ3RoTWVzc2FnZShwYXJhbWV0ZXJzKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRlc3RTdGVwUmVzdWx0ID0geyBkdXJhdGlvbjogZW5kVGltaW5nKCkgfVxuXG4gIGlmIChyZXN1bHQgPT09ICdwZW5kaW5nJykge1xuICAgIHRlc3RTdGVwUmVzdWx0LnN0YXR1cyA9IFN0YXR1cy5QRU5ESU5HXG4gIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICB0ZXN0U3RlcFJlc3VsdC5leGNlcHRpb24gPSBlcnJvclxuICAgIHRlc3RTdGVwUmVzdWx0LnN0YXR1cyA9IFN0YXR1cy5GQUlMRURcbiAgfSBlbHNlIHtcbiAgICB0ZXN0U3RlcFJlc3VsdC5zdGF0dXMgPSBTdGF0dXMuUEFTU0VEXG4gIH1cblxuICByZXR1cm4gdGVzdFN0ZXBSZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBydW4gfVxuIl19