'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _user_code_runner = require('../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

var _verror = require('verror');

var _verror2 = _interopRequireDefault(_verror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventBroadcaster = function () {
  function EventBroadcaster(_ref) {
    var cwd = _ref.cwd,
        listenerDefaultTimeout = _ref.listenerDefaultTimeout,
        listeners = _ref.listeners;
    (0, _classCallCheck3.default)(this, EventBroadcaster);

    this.cwd = cwd;
    this.listenerDefaultTimeout = listenerDefaultTimeout;
    this.listeners = listeners;
  }

  (0, _createClass3.default)(EventBroadcaster, [{
    key: 'broadcastAroundEvent',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* (event, fn) {
        yield this.broadcastEvent(event.buildBeforeEvent());
        yield fn();
        yield this.broadcastEvent(event.buildAfterEvent());
      });

      function broadcastAroundEvent(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return broadcastAroundEvent;
    }()
  }, {
    key: 'broadcastEvent',
    value: function broadcastEvent(event) {
      var _this = this;

      return _bluebird2.default.each(this.listeners, function () {
        var _ref3 = (0, _bluebird.coroutine)(function* (listener) {
          var fnName = 'handle' + event.name;
          var handler = listener[fnName];
          if (handler) {
            var timeout = listener.timeout || _this.listenerDefaultTimeout;

            var _ref4 = yield _user_code_runner2.default.run({
              argsArray: [event.data],
              fn: handler,
              thisArg: listener,
              timeoutInMilliseconds: timeout
            }),
                error = _ref4.error;

            if (error) {
              var location = _this.getListenerErrorLocation({ fnName: fnName, listener: listener });
              throw new _verror2.default(error, 'a handler errored, process exiting: ' + location);
            }
          }
        });

        return function (_x3) {
          return _ref3.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'getListenerErrorLocation',
    value: function getListenerErrorLocation(_ref5) {
      var fnName = _ref5.fnName,
          listener = _ref5.listener;

      return listener.location || listener.constructor.name + '::' + fnName;
    }
  }]);
  return EventBroadcaster;
}();

exports.default = EventBroadcaster;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL2V2ZW50X2Jyb2FkY2FzdGVyLmpzIl0sIm5hbWVzIjpbIkV2ZW50QnJvYWRjYXN0ZXIiLCJjd2QiLCJsaXN0ZW5lckRlZmF1bHRUaW1lb3V0IiwibGlzdGVuZXJzIiwiZXZlbnQiLCJmbiIsImJyb2FkY2FzdEV2ZW50IiwiYnVpbGRCZWZvcmVFdmVudCIsImJ1aWxkQWZ0ZXJFdmVudCIsImVhY2giLCJsaXN0ZW5lciIsImZuTmFtZSIsIm5hbWUiLCJoYW5kbGVyIiwidGltZW91dCIsInJ1biIsImFyZ3NBcnJheSIsImRhdGEiLCJ0aGlzQXJnIiwidGltZW91dEluTWlsbGlzZWNvbmRzIiwiZXJyb3IiLCJsb2NhdGlvbiIsImdldExpc3RlbmVyRXJyb3JMb2NhdGlvbiIsImNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7SUFFcUJBLGdCO0FBQ25CLGtDQUF3RDtBQUFBLFFBQTFDQyxHQUEwQyxRQUExQ0EsR0FBMEM7QUFBQSxRQUFyQ0Msc0JBQXFDLFFBQXJDQSxzQkFBcUM7QUFBQSxRQUFiQyxTQUFhLFFBQWJBLFNBQWE7QUFBQTs7QUFDdEQsU0FBS0YsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0Msc0JBQUwsR0FBOEJBLHNCQUE5QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0Q7Ozs7O3NEQUUwQkMsSyxFQUFPQyxFLEVBQUk7QUFDcEMsY0FBTSxLQUFLQyxjQUFMLENBQW9CRixNQUFNRyxnQkFBTixFQUFwQixDQUFOO0FBQ0EsY0FBTUYsSUFBTjtBQUNBLGNBQU0sS0FBS0MsY0FBTCxDQUFvQkYsTUFBTUksZUFBTixFQUFwQixDQUFOO0FBQ0QsTzs7Ozs7Ozs7OzttQ0FFY0osSyxFQUFPO0FBQUE7O0FBQ3BCLGFBQU8sbUJBQVFLLElBQVIsQ0FBYSxLQUFLTixTQUFsQjtBQUFBLDZDQUE2QixXQUFNTyxRQUFOLEVBQWtCO0FBQ3BELGNBQU1DLG9CQUFrQlAsTUFBTVEsSUFBOUI7QUFDQSxjQUFNQyxVQUFVSCxTQUFTQyxNQUFULENBQWhCO0FBQ0EsY0FBSUUsT0FBSixFQUFhO0FBQ1gsZ0JBQU1DLFVBQVVKLFNBQVNJLE9BQVQsSUFBb0IsTUFBS1osc0JBQXpDOztBQURXLHdCQUVPLE1BQU0sMkJBQWVhLEdBQWYsQ0FBbUI7QUFDekNDLHlCQUFXLENBQUNaLE1BQU1hLElBQVAsQ0FEOEI7QUFFekNaLGtCQUFJUSxPQUZxQztBQUd6Q0ssdUJBQVNSLFFBSGdDO0FBSXpDUyxxQ0FBdUJMO0FBSmtCLGFBQW5CLENBRmI7QUFBQSxnQkFFSE0sS0FGRyxTQUVIQSxLQUZHOztBQVFYLGdCQUFJQSxLQUFKLEVBQVc7QUFDVCxrQkFBTUMsV0FBVyxNQUFLQyx3QkFBTCxDQUE4QixFQUFFWCxjQUFGLEVBQVVELGtCQUFWLEVBQTlCLENBQWpCO0FBQ0Esb0JBQU0scUJBQ0pVLEtBREksMkNBRW1DQyxRQUZuQyxDQUFOO0FBSUQ7QUFDRjtBQUNGLFNBbkJNOztBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQVA7QUFvQkQ7OztvREFFOEM7QUFBQSxVQUFwQlYsTUFBb0IsU0FBcEJBLE1BQW9CO0FBQUEsVUFBWkQsUUFBWSxTQUFaQSxRQUFZOztBQUM3QyxhQUFPQSxTQUFTVyxRQUFULElBQXdCWCxTQUFTYSxXQUFULENBQXFCWCxJQUE3QyxVQUFzREQsTUFBN0Q7QUFDRDs7Ozs7a0JBdENrQlgsZ0IiLCJmaWxlIjoiZXZlbnRfYnJvYWRjYXN0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCBVc2VyQ29kZVJ1bm5lciBmcm9tICcuLi91c2VyX2NvZGVfcnVubmVyJ1xuaW1wb3J0IFZFcnJvciBmcm9tICd2ZXJyb3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50QnJvYWRjYXN0ZXIge1xuICBjb25zdHJ1Y3Rvcih7IGN3ZCwgbGlzdGVuZXJEZWZhdWx0VGltZW91dCwgbGlzdGVuZXJzIH0pIHtcbiAgICB0aGlzLmN3ZCA9IGN3ZFxuICAgIHRoaXMubGlzdGVuZXJEZWZhdWx0VGltZW91dCA9IGxpc3RlbmVyRGVmYXVsdFRpbWVvdXRcbiAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVyc1xuICB9XG5cbiAgYXN5bmMgYnJvYWRjYXN0QXJvdW5kRXZlbnQoZXZlbnQsIGZuKSB7XG4gICAgYXdhaXQgdGhpcy5icm9hZGNhc3RFdmVudChldmVudC5idWlsZEJlZm9yZUV2ZW50KCkpXG4gICAgYXdhaXQgZm4oKVxuICAgIGF3YWl0IHRoaXMuYnJvYWRjYXN0RXZlbnQoZXZlbnQuYnVpbGRBZnRlckV2ZW50KCkpXG4gIH1cblxuICBicm9hZGNhc3RFdmVudChldmVudCkge1xuICAgIHJldHVybiBQcm9taXNlLmVhY2godGhpcy5saXN0ZW5lcnMsIGFzeW5jIGxpc3RlbmVyID0+IHtcbiAgICAgIGNvbnN0IGZuTmFtZSA9IGBoYW5kbGUke2V2ZW50Lm5hbWV9YFxuICAgICAgY29uc3QgaGFuZGxlciA9IGxpc3RlbmVyW2ZuTmFtZV1cbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBsaXN0ZW5lci50aW1lb3V0IHx8IHRoaXMubGlzdGVuZXJEZWZhdWx0VGltZW91dFxuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBVc2VyQ29kZVJ1bm5lci5ydW4oe1xuICAgICAgICAgIGFyZ3NBcnJheTogW2V2ZW50LmRhdGFdLFxuICAgICAgICAgIGZuOiBoYW5kbGVyLFxuICAgICAgICAgIHRoaXNBcmc6IGxpc3RlbmVyLFxuICAgICAgICAgIHRpbWVvdXRJbk1pbGxpc2Vjb25kczogdGltZW91dFxuICAgICAgICB9KVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZ2V0TGlzdGVuZXJFcnJvckxvY2F0aW9uKHsgZm5OYW1lLCBsaXN0ZW5lciB9KVxuICAgICAgICAgIHRocm93IG5ldyBWRXJyb3IoXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIGBhIGhhbmRsZXIgZXJyb3JlZCwgcHJvY2VzcyBleGl0aW5nOiAke2xvY2F0aW9ufWBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0TGlzdGVuZXJFcnJvckxvY2F0aW9uKHsgZm5OYW1lLCBsaXN0ZW5lciB9KSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmxvY2F0aW9uIHx8IGAke2xpc3RlbmVyLmNvbnN0cnVjdG9yLm5hbWV9Ojoke2ZuTmFtZX1gXG4gIH1cbn1cbiJdfQ==