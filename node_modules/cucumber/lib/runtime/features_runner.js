'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _event = require('./event');

var _event2 = _interopRequireDefault(_event);

var _features_result = require('../models/features_result');

var _features_result2 = _interopRequireDefault(_features_result);

var _scenario_result = require('../models/scenario_result');

var _scenario_result2 = _interopRequireDefault(_scenario_result);

var _scenario_runner = require('./scenario_runner');

var _scenario_runner2 = _interopRequireDefault(_scenario_runner);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _user_code_runner = require('../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

var _helpers = require('../formatter/helpers');

var _verror = require('verror');

var _verror2 = _interopRequireDefault(_verror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FeaturesRunner = function () {
  function FeaturesRunner(_ref) {
    var eventBroadcaster = _ref.eventBroadcaster,
        features = _ref.features,
        options = _ref.options,
        supportCodeLibrary = _ref.supportCodeLibrary;
    (0, _classCallCheck3.default)(this, FeaturesRunner);

    this.eventBroadcaster = eventBroadcaster;
    this.features = features;
    this.options = options;
    this.supportCodeLibrary = supportCodeLibrary;
    this.featuresResult = new _features_result2.default(options.strict);
  }

  (0, _createClass3.default)(FeaturesRunner, [{
    key: 'run',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* () {
        var _this = this;

        yield this.runFeaturesHooks('beforeFeaturesHookDefinitions', 'a BeforeAll');
        var event = new _event2.default({
          data: this.features,
          name: _event2.default.FEATURES_EVENT_NAME
        });
        yield this.eventBroadcaster.broadcastAroundEvent(event, (0, _bluebird.coroutine)(function* () {
          yield _bluebird2.default.each(_this.features, _this.runFeature.bind(_this));
          yield _this.broadcastFeaturesResult();
        }));
        yield this.runFeaturesHooks('afterFeaturesHookDefinitions', 'an AfterAll');
        return this.featuresResult.success;
      });

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'runFeaturesHooks',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(function* (key, name) {
        var _this2 = this;

        yield _bluebird2.default.each(this.supportCodeLibrary[key], function () {
          var _ref5 = (0, _bluebird.coroutine)(function* (hookDefinition) {
            var _ref6 = yield _user_code_runner2.default.run({
              argsArray: [],
              fn: hookDefinition.code,
              thisArg: null,
              timeoutInMilliseconds: hookDefinition.timeout || _this2.supportCodeLibrary.defaultTimeout
            }),
                error = _ref6.error;

            if (error) {
              var location = (0, _helpers.formatLocation)(hookDefinition);
              throw new _verror2.default(error, name + ' hook errored, process exiting: ' + location);
            }
          });

          return function (_x3) {
            return _ref5.apply(this, arguments);
          };
        }());
      });

      function runFeaturesHooks(_x, _x2) {
        return _ref4.apply(this, arguments);
      }

      return runFeaturesHooks;
    }()
  }, {
    key: 'broadcastFeaturesResult',
    value: function () {
      var _ref7 = (0, _bluebird.coroutine)(function* () {
        var event = new _event2.default({
          data: this.featuresResult,
          name: _event2.default.FEATURES_RESULT_EVENT_NAME
        });
        yield this.eventBroadcaster.broadcastEvent(event);
      });

      function broadcastFeaturesResult() {
        return _ref7.apply(this, arguments);
      }

      return broadcastFeaturesResult;
    }()
  }, {
    key: 'runFeature',
    value: function () {
      var _ref8 = (0, _bluebird.coroutine)(function* (feature) {
        var _this3 = this;

        var event = new _event2.default({ data: feature, name: _event2.default.FEATURE_EVENT_NAME });
        yield this.eventBroadcaster.broadcastAroundEvent(event, (0, _bluebird.coroutine)(function* () {
          yield _bluebird2.default.each(feature.scenarios, function () {
            var _ref10 = (0, _bluebird.coroutine)(function* (scenario) {
              var scenarioResult = yield _this3.runScenario(scenario);
              _this3.featuresResult.witnessScenarioResult(scenarioResult);
            });

            return function (_x5) {
              return _ref10.apply(this, arguments);
            };
          }());
        }));
      });

      function runFeature(_x4) {
        return _ref8.apply(this, arguments);
      }

      return runFeature;
    }()
  }, {
    key: 'runScenario',
    value: function () {
      var _ref11 = (0, _bluebird.coroutine)(function* (scenario) {
        if (!this.featuresResult.success && this.options.failFast) {
          return new _scenario_result2.default(scenario, _status2.default.SKIPPED);
        }
        var scenarioRunner = new _scenario_runner2.default({
          eventBroadcaster: this.eventBroadcaster,
          options: this.options,
          scenario: scenario,
          supportCodeLibrary: this.supportCodeLibrary
        });
        return yield scenarioRunner.run();
      });

      function runScenario(_x6) {
        return _ref11.apply(this, arguments);
      }

      return runScenario;
    }()
  }]);
  return FeaturesRunner;
}();

exports.default = FeaturesRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL2ZlYXR1cmVzX3J1bm5lci5qcyJdLCJuYW1lcyI6WyJGZWF0dXJlc1J1bm5lciIsImV2ZW50QnJvYWRjYXN0ZXIiLCJmZWF0dXJlcyIsIm9wdGlvbnMiLCJzdXBwb3J0Q29kZUxpYnJhcnkiLCJmZWF0dXJlc1Jlc3VsdCIsInN0cmljdCIsInJ1bkZlYXR1cmVzSG9va3MiLCJldmVudCIsImRhdGEiLCJuYW1lIiwiRkVBVFVSRVNfRVZFTlRfTkFNRSIsImJyb2FkY2FzdEFyb3VuZEV2ZW50IiwiZWFjaCIsInJ1bkZlYXR1cmUiLCJicm9hZGNhc3RGZWF0dXJlc1Jlc3VsdCIsInN1Y2Nlc3MiLCJrZXkiLCJob29rRGVmaW5pdGlvbiIsInJ1biIsImFyZ3NBcnJheSIsImZuIiwiY29kZSIsInRoaXNBcmciLCJ0aW1lb3V0SW5NaWxsaXNlY29uZHMiLCJ0aW1lb3V0IiwiZGVmYXVsdFRpbWVvdXQiLCJlcnJvciIsImxvY2F0aW9uIiwiRkVBVFVSRVNfUkVTVUxUX0VWRU5UX05BTUUiLCJicm9hZGNhc3RFdmVudCIsImZlYXR1cmUiLCJGRUFUVVJFX0VWRU5UX05BTUUiLCJzY2VuYXJpb3MiLCJzY2VuYXJpbyIsInNjZW5hcmlvUmVzdWx0IiwicnVuU2NlbmFyaW8iLCJ3aXRuZXNzU2NlbmFyaW9SZXN1bHQiLCJmYWlsRmFzdCIsIlNLSVBQRUQiLCJzY2VuYXJpb1J1bm5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztJQUVxQkEsYztBQUNuQixnQ0FBeUU7QUFBQSxRQUEzREMsZ0JBQTJELFFBQTNEQSxnQkFBMkQ7QUFBQSxRQUF6Q0MsUUFBeUMsUUFBekNBLFFBQXlDO0FBQUEsUUFBL0JDLE9BQStCLFFBQS9CQSxPQUErQjtBQUFBLFFBQXRCQyxrQkFBc0IsUUFBdEJBLGtCQUFzQjtBQUFBOztBQUN2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QU1DLGlCQUFpQiw4QkFBbUI7QUFDeEN2Qyw0QkFBa0IsS0FBS0EsZ0JBRGlCO0FBRXhDRSxtQkFBUyxLQUFLQSxPQUYwQjtBQUd4QytCLDRCQUh3QztBQUl4QzlCLDhCQUFvQixLQUFLQTtBQUplLFNBQW5CLENBQXZCO0FBTUEsZUFBTyxNQUFNb0MsZUFBZXJCLEdBQWYsRUFBYjtBQUNELE87Ozs7Ozs7Ozs7OztrQkF2RWtCbkIsYyIsImZpbGUiOiJmZWF0dXJlc19ydW5uZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnQgZnJvbSAnLi9ldmVudCdcbmltcG9ydCBGZWF0dXJlc1Jlc3VsdCBmcm9tICcuLi9tb2RlbHMvZmVhdHVyZXNfcmVzdWx0J1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgU2NlbmFyaW9SZXN1bHQgZnJvbSAnLi4vbW9kZWxzL3NjZW5hcmlvX3Jlc3VsdCdcbmltcG9ydCBTY2VuYXJpb1J1bm5lciBmcm9tICcuL3NjZW5hcmlvX3J1bm5lcidcbmltcG9ydCBTdGF0dXMgZnJvbSAnLi4vc3RhdHVzJ1xuaW1wb3J0IFVzZXJDb2RlUnVubmVyIGZyb20gJy4uL3VzZXJfY29kZV9ydW5uZXInXG5pbXBvcnQgeyBmb3JtYXRMb2NhdGlvbiB9IGZyb20gJy4uL2Zvcm1hdHRlci9oZWxwZXJzJ1xuaW1wb3J0IFZFcnJvciBmcm9tICd2ZXJyb3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlYXR1cmVzUnVubmVyIHtcbiAgY29uc3RydWN0b3IoeyBldmVudEJyb2FkY2FzdGVyLCBmZWF0dXJlcywgb3B0aW9ucywgc3VwcG9ydENvZGVMaWJyYXJ5IH0pIHtcbiAgICB0aGlzLmV2ZW50QnJvYWRjYXN0ZXIgPSBldmVudEJyb2FkY2FzdGVyXG4gICAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5ID0gc3VwcG9ydENvZGVMaWJyYXJ5XG4gICAgdGhpcy5mZWF0dXJlc1Jlc3VsdCA9IG5ldyBGZWF0dXJlc1Jlc3VsdChvcHRpb25zLnN0cmljdClcbiAgfVxuXG4gIGFzeW5jIHJ1bigpIHtcbiAgICBhd2FpdCB0aGlzLnJ1bkZlYXR1cmVzSG9va3MoJ2JlZm9yZUZlYXR1cmVzSG9va0RlZmluaXRpb25zJywgJ2EgQmVmb3JlQWxsJylcbiAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCh7XG4gICAgICBkYXRhOiB0aGlzLmZlYXR1cmVzLFxuICAgICAgbmFtZTogRXZlbnQuRkVBVFVSRVNfRVZFTlRfTkFNRVxuICAgIH0pXG4gICAgYXdhaXQgdGhpcy5ldmVudEJyb2FkY2FzdGVyLmJyb2FkY2FzdEFyb3VuZEV2ZW50KGV2ZW50LCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBQcm9taXNlLmVhY2godGhpcy5mZWF0dXJlcywgOjp0aGlzLnJ1bkZlYXR1cmUpXG4gICAgICBhd2FpdCB0aGlzLmJyb2FkY2FzdEZlYXR1cmVzUmVzdWx0KClcbiAgICB9KVxuICAgIGF3YWl0IHRoaXMucnVuRmVhdHVyZXNIb29rcygnYWZ0ZXJGZWF0dXJlc0hvb2tEZWZpbml0aW9ucycsICdhbiBBZnRlckFsbCcpXG4gICAgcmV0dXJuIHRoaXMuZmVhdHVyZXNSZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgYXN5bmMgcnVuRmVhdHVyZXNIb29rcyhrZXksIG5hbWUpIHtcbiAgICBhd2FpdCBQcm9taXNlLmVhY2godGhpcy5zdXBwb3J0Q29kZUxpYnJhcnlba2V5XSwgYXN5bmMgaG9va0RlZmluaXRpb24gPT4ge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgVXNlckNvZGVSdW5uZXIucnVuKHtcbiAgICAgICAgYXJnc0FycmF5OiBbXSxcbiAgICAgICAgZm46IGhvb2tEZWZpbml0aW9uLmNvZGUsXG4gICAgICAgIHRoaXNBcmc6IG51bGwsXG4gICAgICAgIHRpbWVvdXRJbk1pbGxpc2Vjb25kczpcbiAgICAgICAgICBob29rRGVmaW5pdGlvbi50aW1lb3V0IHx8IHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5LmRlZmF1bHRUaW1lb3V0XG4gICAgICB9KVxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZm9ybWF0TG9jYXRpb24oaG9va0RlZmluaXRpb24pXG4gICAgICAgIHRocm93IG5ldyBWRXJyb3IoXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgYCR7bmFtZX0gaG9vayBlcnJvcmVkLCBwcm9jZXNzIGV4aXRpbmc6ICR7bG9jYXRpb259YFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGJyb2FkY2FzdEZlYXR1cmVzUmVzdWx0KCkge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KHtcbiAgICAgIGRhdGE6IHRoaXMuZmVhdHVyZXNSZXN1bHQsXG4gICAgICBuYW1lOiBFdmVudC5GRUFUVVJFU19SRVNVTFRfRVZFTlRfTkFNRVxuICAgIH0pXG4gICAgYXdhaXQgdGhpcy5ldmVudEJyb2FkY2FzdGVyLmJyb2FkY2FzdEV2ZW50KGV2ZW50KVxuICB9XG5cbiAgYXN5bmMgcnVuRmVhdHVyZShmZWF0dXJlKSB7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoeyBkYXRhOiBmZWF0dXJlLCBuYW1lOiBFdmVudC5GRUFUVVJFX0VWRU5UX05BTUUgfSlcbiAgICBhd2FpdCB0aGlzLmV2ZW50QnJvYWRjYXN0ZXIuYnJvYWRjYXN0QXJvdW5kRXZlbnQoZXZlbnQsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UuZWFjaChmZWF0dXJlLnNjZW5hcmlvcywgYXN5bmMgc2NlbmFyaW8gPT4ge1xuICAgICAgICBjb25zdCBzY2VuYXJpb1Jlc3VsdCA9IGF3YWl0IHRoaXMucnVuU2NlbmFyaW8oc2NlbmFyaW8pXG4gICAgICAgIHRoaXMuZmVhdHVyZXNSZXN1bHQud2l0bmVzc1NjZW5hcmlvUmVzdWx0KHNjZW5hcmlvUmVzdWx0KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgcnVuU2NlbmFyaW8oc2NlbmFyaW8pIHtcbiAgICBpZiAoIXRoaXMuZmVhdHVyZXNSZXN1bHQuc3VjY2VzcyAmJiB0aGlzLm9wdGlvbnMuZmFpbEZhc3QpIHtcbiAgICAgIHJldHVybiBuZXcgU2NlbmFyaW9SZXN1bHQoc2NlbmFyaW8sIFN0YXR1cy5TS0lQUEVEKVxuICAgIH1cbiAgICBjb25zdCBzY2VuYXJpb1J1bm5lciA9IG5ldyBTY2VuYXJpb1J1bm5lcih7XG4gICAgICBldmVudEJyb2FkY2FzdGVyOiB0aGlzLmV2ZW50QnJvYWRjYXN0ZXIsXG4gICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICBzY2VuYXJpbyxcbiAgICAgIHN1cHBvcnRDb2RlTGlicmFyeTogdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnlcbiAgICB9KVxuICAgIHJldHVybiBhd2FpdCBzY2VuYXJpb1J1bm5lci5ydW4oKVxuICB9XG59XG4iXX0=