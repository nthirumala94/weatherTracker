'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupportCodeLibraryBuilder = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _parameter_type_registry_builder = require('./parameter_type_registry_builder');

var _parameter_type_registry_builder2 = _interopRequireDefault(_parameter_type_registry_builder);

var _define_helpers = require('./define_helpers');

var _finalize_helpers = require('./finalize_helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SupportCodeLibraryBuilder = exports.SupportCodeLibraryBuilder = function () {
  function SupportCodeLibraryBuilder() {
    var _this = this;

    (0, _classCallCheck3.default)(this, SupportCodeLibraryBuilder);

    this.methods = {
      addTransform: (0, _define_helpers.addTransform)(this),
      defineParameterType: (0, _define_helpers.defineParameterType)(this),
      After: (0, _define_helpers.defineScenarioHook)(this, 'afterScenarioHookDefinitions'),
      AfterAll: (0, _define_helpers.defineFeaturesHook)(this, 'afterFeaturesHookDefinitions'),
      Before: (0, _define_helpers.defineScenarioHook)(this, 'beforeScenarioHookDefinitions'),
      BeforeAll: (0, _define_helpers.defineFeaturesHook)(this, 'beforeFeaturesHookDefinitions'),
      defineSupportCode: function defineSupportCode(fn) {
        fn(_this.methods());
      },
      defineStep: (0, _define_helpers.defineStep)(this),
      registerHandler: (0, _define_helpers.registerHandler)(this),
      registerListener: function registerListener(listener) {
        _this.options.listeners.push(listener);
      },
      setDefaultTimeout: function setDefaultTimeout(milliseconds) {
        _this.options.defaultTimeout = milliseconds;
      },
      setDefinitionFunctionWrapper: function setDefinitionFunctionWrapper(fn) {
        _this.options.definitionFunctionWrapper = fn;
      },
      setWorldConstructor: function setWorldConstructor(fn) {
        _this.options.World = fn;
      }
    };
    this.methods.Given = this.methods.When = this.methods.Then = this.methods.defineStep;
  }

  (0, _createClass3.default)(SupportCodeLibraryBuilder, [{
    key: 'finalize',
    value: function finalize() {
      var _this2 = this;

      (0, _finalize_helpers.wrapDefinitions)({
        cwd: this.cwd,
        definitionFunctionWrapper: this.definitionFunctionWrapper,
        definitions: _lodash2.default.chain(['afterFeaturesHook', 'afterScenarioHook', 'beforeFeaturesHook', 'beforeScenarioHook', 'step']).map(function (key) {
          return _this2.options[key + 'Definitions'];
        }).flatten().value()
      });
      this.options.afterScenarioHookDefinitions.reverse();
      this.options.afterFeaturesHookDefinitions.reverse();
      return this.options;
    }
  }, {
    key: 'reset',
    value: function reset(cwd) {
      this.cwd = cwd;
      this.options = _lodash2.default.cloneDeep({
        afterFeaturesHookDefinitions: [],
        afterScenarioHookDefinitions: [],
        beforeFeaturesHookDefinitions: [],
        beforeScenarioHookDefinitions: [],
        defaultTimeout: 5000,
        definitionFunctionWrapper: null,
        listeners: [],
        stepDefinitions: [],
        parameterTypeRegistry: _parameter_type_registry_builder2.default.build(),
        World: function World(_ref) {
          var attach = _ref.attach,
              parameters = _ref.parameters;

          this.attach = attach;
          this.parameters = parameters;
        }
      });
    }
  }]);
  return SupportCodeLibraryBuilder;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdXBwb3J0X2NvZGVfbGlicmFyeV9idWlsZGVyL2xpYnJhcnkuanMiXSwibmFtZXMiOlsiU3VwcG9ydENvZGVMaWJyYXJ5QnVpbGRlciIsIm1ldGhvZHMiLCJhZGRUcmFuc2Zvcm0iLCJkZWZpbmVQYXJhbWV0ZXJUeXBlIiwiQWZ0ZXIiLCJBZnRlckFsbCIsIkJlZm9yZSIsIkJlZm9yZUFsbCIsImRlZmluZVN1cHBvcnRDb2RlIiwiZm4iLCJkZWZpbmVTdGVwIiwicmVnaXN0ZXJIYW5kbGVyIiwicmVnaXN0ZXJMaXN0ZW5lciIsIm9wdGlvbnMiLCJsaXN0ZW5lcnMiLCJwdXNoIiwibGlzdGVuZXIiLCJzZXREZWZhdWx0VGltZW91dCIsImRlZmF1bHRUaW1lb3V0IiwibWlsbGlzZWNvbmRzIiwic2V0RGVmaW5pdGlvbkZ1bmN0aW9uV3JhcHBlciIsImRlZmluaXRpb25GdW5jdGlvbldyYXBwZXIiLCJzZXRXb3JsZENvbnN0cnVjdG9yIiwiV29ybGQiLCJHaXZlbiIsIldoZW4iLCJUaGVuIiwiY3dkIiwiZGVmaW5pdGlvbnMiLCJjaGFpbiIsIm1hcCIsImtleSIsImZsYXR0ZW4iLCJ2YWx1ZSIsImFmdGVyU2NlbmFyaW9Ib29rRGVmaW5pdGlvbnMiLCJyZXZlcnNlIiwiYWZ0ZXJGZWF0dXJlc0hvb2tEZWZpbml0aW9ucyIsImNsb25lRGVlcCIsImJlZm9yZUZlYXR1cmVzSG9va0RlZmluaXRpb25zIiwiYmVmb3JlU2NlbmFyaW9Ib29rRGVmaW5pdGlvbnMiLCJzdGVwRGVmaW5pdGlvbnMiLCJwYXJhbWV0ZXJUeXBlUmVnaXN0cnkiLCJidWlsZCIsImF0dGFjaCIsInBhcmFtZXRlcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFRQTs7OztJQUVhQSx5QixXQUFBQSx5QjtBQUNYLHVDQUFjO0FBQUE7O0FBQUE7O0FBQ1osU0FBS0MsT0FBTCxHQUFlO0FBQ2JDLG9CQUFjLGtDQUFhLElBQWIsQ0FERDtBQUViQywyQkFBcUIseUNBQW9CLElBQXBCLENBRlI7QUFHYkMsYUFBTyx3Q0FBbUIsSUFBbkIsRUFBeUIsOEJBQXpCLENBSE07QUFJYkMsZ0JBQVUsd0NBQW1CLElBQW5CLEVBQXlCLDhCQUF6QixDQUpHO0FBS2JDLGNBQVEsd0NBQW1CLElBQW5CLEVBQXlCLCtCQUF6QixDQUxLO0FBTWJDLGlCQUFXLHdDQUFtQixJQUFuQixFQUF5QiwrQkFBekIsQ0FORTtBQU9iQyx5QkFBbUIsK0JBQU07QUFDdkJDLFdBQUcsTUFBS1IsT0FBTCxFQUFIO0FBQ0QsT0FUWTtBQVViUyxrQkFBWSxnQ0FBVyxJQUFYLENBVkM7QUFXYkMsdUJBQWlCLHFDQUFnQixJQUFoQixDQVhKO0FBWWJDLHdCQUFrQixvQ0FBWTtBQUM1QixjQUFLQyxPQUFMLENBQWFDLFNBQWIsQ0FBdUJDLElBQXZCLENBQTRCQyxRQUE1QjtBQUNELE9BZFk7QUFlYkMseUJBQW1CLHlDQUFnQjtBQUNqQyxjQUFLSixPQUFMLENBQWFLLGNBQWIsR0FBOEJDLFlBQTlCO0FBQ0QsT0FqQlk7QUFrQmJDLG9DQUE4QiwwQ0FBTTtBQUNsQyxjQUFLUCxPQUFMLENBQWFRLHlCQUFiLEdBQXlDWixFQUF6QztBQUNELE9BcEJZO0FBcUJiYSwyQkFBcUIsaUNBQU07QUFDekIsY0FBS1QsT0FBTCxDQUFhVSxLQUFiLEdBQXFCZCxFQUFyQjtBQUNEO0FBdkJZLEtBQWY7QUF5QkEsU0FBS1IsT0FBTCxDQUFhdUIsS0FBYixHQUFxQixLQUFLdkIsT0FBTCxDQUFhd0IsSUFBYixHQUFvQixLQUFLeEIsT0FBTCxDQUFheUIsSUFBYixHQUFvQixLQUFLekIsT0FBTCxDQUFhUyxVQUExRTtBQUNEOzs7OytCQUVVO0FBQUE7O0FBQ1QsNkNBQWdCO0FBQ2RpQixhQUFLLEtBQUtBLEdBREk7QUFFZE4sbUNBQTJCLEtBQUtBLHlCQUZsQjtBQUdkTyxxQkFBYSxpQkFBRUMsS0FBRixDQUFRLENBQ25CLG1CQURtQixFQUVuQixtQkFGbUIsRUFHbkIsb0JBSG1CLEVBSW5CLG9CQUptQixFQUtuQixNQUxtQixDQUFSLEVBT1ZDLEdBUFUsQ0FPTjtBQUFBLGlCQUFPLE9BQUtqQixPQUFMLENBQWFrQixNQUFNLGFBQW5CLENBQVA7QUFBQSxTQVBNLEVBUVZDLE9BUlUsR0FTVkMsS0FUVTtBQUhDLE9BQWhCO0FBY0EsV0FBS3BCLE9BQUwsQ0FBYXFCLDRCQUFiLENBQTBDQyxPQUExQztBQUNBLFdBQUt0QixPQUFMLENBQWF1Qiw0QkFBYixDQUEwQ0QsT0FBMUM7QUFDQSxhQUFPLEtBQUt0QixPQUFaO0FBQ0Q7OzswQkFFS2MsRyxFQUFLO0FBQ1QsV0FBS0EsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsV0FBS2QsT0FBTCxHQUFlLGlCQUFFd0IsU0FBRixDQUFZO0FBQ3pCRCxzQ0FBOEIsRUFETDtBQUV6QkYsc0NBQThCLEVBRkw7QUFHekJJLHVDQUErQixFQUhOO0FBSXpCQyx1Q0FBK0IsRUFKTjtBQUt6QnJCLHdCQUFnQixJQUxTO0FBTXpCRyxtQ0FBMkIsSUFORjtBQU96QlAsbUJBQVcsRUFQYztBQVF6QjBCLHlCQUFpQixFQVJRO0FBU3pCQywrQkFBdUIsMENBQXVCQyxLQUF2QixFQVRFO0FBVXpCbkIsYUFWeUIsdUJBVUs7QUFBQSxjQUF0Qm9CLE1BQXNCLFFBQXRCQSxNQUFzQjtBQUFBLGNBQWRDLFVBQWMsUUFBZEEsVUFBYzs7QUFDNUIsZUFBS0QsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsZUFBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDRDtBQWJ3QixPQUFaLENBQWY7QUFlRCIsImZpbGUiOiJsaWJyYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFRyYW5zZm9ybUxvb2t1cEJ1aWxkZXIgZnJvbSAnLi9wYXJhbWV0ZXJfdHlwZV9yZWdpc3RyeV9idWlsZGVyJ1xuaW1wb3J0IHtcbiAgYWRkVHJhbnNmb3JtLFxuICBkZWZpbmVGZWF0dXJlc0hvb2ssXG4gIGRlZmluZVBhcmFtZXRlclR5cGUsXG4gIGRlZmluZVNjZW5hcmlvSG9vayxcbiAgZGVmaW5lU3RlcCxcbiAgcmVnaXN0ZXJIYW5kbGVyXG59IGZyb20gJy4vZGVmaW5lX2hlbHBlcnMnXG5pbXBvcnQgeyB3cmFwRGVmaW5pdGlvbnMgfSBmcm9tICcuL2ZpbmFsaXplX2hlbHBlcnMnXG5cbmV4cG9ydCBjbGFzcyBTdXBwb3J0Q29kZUxpYnJhcnlCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tZXRob2RzID0ge1xuICAgICAgYWRkVHJhbnNmb3JtOiBhZGRUcmFuc2Zvcm0odGhpcyksXG4gICAgICBkZWZpbmVQYXJhbWV0ZXJUeXBlOiBkZWZpbmVQYXJhbWV0ZXJUeXBlKHRoaXMpLFxuICAgICAgQWZ0ZXI6IGRlZmluZVNjZW5hcmlvSG9vayh0aGlzLCAnYWZ0ZXJTY2VuYXJpb0hvb2tEZWZpbml0aW9ucycpLFxuICAgICAgQWZ0ZXJBbGw6IGRlZmluZUZlYXR1cmVzSG9vayh0aGlzLCAnYWZ0ZXJGZWF0dXJlc0hvb2tEZWZpbml0aW9ucycpLFxuICAgICAgQmVmb3JlOiBkZWZpbmVTY2VuYXJpb0hvb2sodGhpcywgJ2JlZm9yZVNjZW5hcmlvSG9va0RlZmluaXRpb25zJyksXG4gICAgICBCZWZvcmVBbGw6IGRlZmluZUZlYXR1cmVzSG9vayh0aGlzLCAnYmVmb3JlRmVhdHVyZXNIb29rRGVmaW5pdGlvbnMnKSxcbiAgICAgIGRlZmluZVN1cHBvcnRDb2RlOiBmbiA9PiB7XG4gICAgICAgIGZuKHRoaXMubWV0aG9kcygpKVxuICAgICAgfSxcbiAgICAgIGRlZmluZVN0ZXA6IGRlZmluZVN0ZXAodGhpcyksXG4gICAgICByZWdpc3RlckhhbmRsZXI6IHJlZ2lzdGVySGFuZGxlcih0aGlzKSxcbiAgICAgIHJlZ2lzdGVyTGlzdGVuZXI6IGxpc3RlbmVyID0+IHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKVxuICAgICAgfSxcbiAgICAgIHNldERlZmF1bHRUaW1lb3V0OiBtaWxsaXNlY29uZHMgPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGVmYXVsdFRpbWVvdXQgPSBtaWxsaXNlY29uZHNcbiAgICAgIH0sXG4gICAgICBzZXREZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyOiBmbiA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyID0gZm5cbiAgICAgIH0sXG4gICAgICBzZXRXb3JsZENvbnN0cnVjdG9yOiBmbiA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5Xb3JsZCA9IGZuXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWV0aG9kcy5HaXZlbiA9IHRoaXMubWV0aG9kcy5XaGVuID0gdGhpcy5tZXRob2RzLlRoZW4gPSB0aGlzLm1ldGhvZHMuZGVmaW5lU3RlcFxuICB9XG5cbiAgZmluYWxpemUoKSB7XG4gICAgd3JhcERlZmluaXRpb25zKHtcbiAgICAgIGN3ZDogdGhpcy5jd2QsXG4gICAgICBkZWZpbml0aW9uRnVuY3Rpb25XcmFwcGVyOiB0aGlzLmRlZmluaXRpb25GdW5jdGlvbldyYXBwZXIsXG4gICAgICBkZWZpbml0aW9uczogXy5jaGFpbihbXG4gICAgICAgICdhZnRlckZlYXR1cmVzSG9vaycsXG4gICAgICAgICdhZnRlclNjZW5hcmlvSG9vaycsXG4gICAgICAgICdiZWZvcmVGZWF0dXJlc0hvb2snLFxuICAgICAgICAnYmVmb3JlU2NlbmFyaW9Ib29rJyxcbiAgICAgICAgJ3N0ZXAnXG4gICAgICBdKVxuICAgICAgICAubWFwKGtleSA9PiB0aGlzLm9wdGlvbnNba2V5ICsgJ0RlZmluaXRpb25zJ10pXG4gICAgICAgIC5mbGF0dGVuKClcbiAgICAgICAgLnZhbHVlKClcbiAgICB9KVxuICAgIHRoaXMub3B0aW9ucy5hZnRlclNjZW5hcmlvSG9va0RlZmluaXRpb25zLnJldmVyc2UoKVxuICAgIHRoaXMub3B0aW9ucy5hZnRlckZlYXR1cmVzSG9va0RlZmluaXRpb25zLnJldmVyc2UoKVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNcbiAgfVxuXG4gIHJlc2V0KGN3ZCkge1xuICAgIHRoaXMuY3dkID0gY3dkXG4gICAgdGhpcy5vcHRpb25zID0gXy5jbG9uZURlZXAoe1xuICAgICAgYWZ0ZXJGZWF0dXJlc0hvb2tEZWZpbml0aW9uczogW10sXG4gICAgICBhZnRlclNjZW5hcmlvSG9va0RlZmluaXRpb25zOiBbXSxcbiAgICAgIGJlZm9yZUZlYXR1cmVzSG9va0RlZmluaXRpb25zOiBbXSxcbiAgICAgIGJlZm9yZVNjZW5hcmlvSG9va0RlZmluaXRpb25zOiBbXSxcbiAgICAgIGRlZmF1bHRUaW1lb3V0OiA1MDAwLFxuICAgICAgZGVmaW5pdGlvbkZ1bmN0aW9uV3JhcHBlcjogbnVsbCxcbiAgICAgIGxpc3RlbmVyczogW10sXG4gICAgICBzdGVwRGVmaW5pdGlvbnM6IFtdLFxuICAgICAgcGFyYW1ldGVyVHlwZVJlZ2lzdHJ5OiBUcmFuc2Zvcm1Mb29rdXBCdWlsZGVyLmJ1aWxkKCksXG4gICAgICBXb3JsZCh7IGF0dGFjaCwgcGFyYW1ldGVycyB9KSB7XG4gICAgICAgIHRoaXMuYXR0YWNoID0gYXR0YWNoXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnNcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iXX0=