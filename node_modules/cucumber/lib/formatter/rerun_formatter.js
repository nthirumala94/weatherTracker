'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _2 = require('./');

var _3 = _interopRequireDefault(_2);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RerunFormatter = function (_Formatter) {
  (0, _inherits3.default)(RerunFormatter, _Formatter);

  function RerunFormatter(options) {
    (0, _classCallCheck3.default)(this, RerunFormatter);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RerunFormatter.__proto__ || Object.getPrototypeOf(RerunFormatter)).call(this, options));

    options.eventBroadcaster.on('test-case-finished', _this.storeFailedTestCases.bind(_this)).on('test-run-finished', _this.logFailedTestCases.bind(_this));
    _this.mapping = {};
    return _this;
  }

  (0, _createClass3.default)(RerunFormatter, [{
    key: 'storeFailedTestCases',
    value: function storeFailedTestCases(_ref) {
      var _ref$sourceLocation = _ref.sourceLocation,
          line = _ref$sourceLocation.line,
          uri = _ref$sourceLocation.uri,
          status = _ref.result.status;

      if (status !== _status2.default.PASSED) {
        if (!this.mapping[uri]) {
          this.mapping[uri] = [];
        }
        this.mapping[uri].push(line);
      }
    }
  }, {
    key: 'logFailedTestCases',
    value: function logFailedTestCases() {
      var text = _lodash2.default.chain(this.mapping).map(function (lines, uri) {
        return uri + ':' + lines.join(':');
      }).join('\n').value();
      this.log(text);
    }
  }]);
  return RerunFormatter;
}(_3.default);

exports.default = RerunFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXIvcmVydW5fZm9ybWF0dGVyLmpzIl0sIm5hbWVzIjpbIlJlcnVuRm9ybWF0dGVyIiwib3B0aW9ucyIsImV2ZW50QnJvYWRjYXN0ZXIiLCJvbiIsInN0b3JlRmFpbGVkVGVzdENhc2VzIiwibG9nRmFpbGVkVGVzdENhc2VzIiwibWFwcGluZyIsInNvdXJjZUxvY2F0aW9uIiwibGluZSIsInVyaSIsInN0YXR1cyIsInJlc3VsdCIsIlBBU1NFRCIsInB1c2giLCJ0ZXh0IiwiY2hhaW4iLCJtYXAiLCJsaW5lcyIsImpvaW4iLCJ2YWx1ZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxjOzs7QUFDbkIsMEJBQVlDLE9BQVosRUFBcUI7QUFBQTs7QUFBQSw4SUFDYkEsT0FEYTs7QUFFbkJBLFlBQVFDLGdCQUFSLENBQ0dDLEVBREgsQ0FDTSxvQkFETixFQUM4QixNQUFLQyxvQkFEbkMsY0FFR0QsRUFGSCxDQUVNLG1CQUZOLEVBRTZCLE1BQUtFLGtCQUZsQztBQUdBLFVBQUtDLE9BQUwsR0FBZSxFQUFmO0FBTG1CO0FBTXBCOzs7OytDQUUyRTtBQUFBLHFDQUFyREMsY0FBcUQ7QUFBQSxVQUFuQ0MsSUFBbUMsdUJBQW5DQSxJQUFtQztBQUFBLFVBQTdCQyxHQUE2Qix1QkFBN0JBLEdBQTZCO0FBQUEsVUFBWkMsTUFBWSxRQUF0QkMsTUFBc0IsQ0FBWkQsTUFBWTs7QUFDMUUsVUFBSUEsV0FBVyxpQkFBT0UsTUFBdEIsRUFBOEI7QUFDNUIsWUFBSSxDQUFDLEtBQUtOLE9BQUwsQ0FBYUcsR0FBYixDQUFMLEVBQXdCO0FBQ3RCLGVBQUtILE9BQUwsQ0FBYUcsR0FBYixJQUFvQixFQUFwQjtBQUNEO0FBQ0QsYUFBS0gsT0FBTCxDQUFhRyxHQUFiLEVBQWtCSSxJQUFsQixDQUF1QkwsSUFBdkI7QUFDRDtBQUNGOzs7eUNBRW9CO0FBQ25CLFVBQU1NLE9BQU8saUJBQUVDLEtBQUYsQ0FBUSxLQUFLVCxPQUFiLEVBQ1ZVLEdBRFUsQ0FDTixVQUFDQyxLQUFELEVBQVFSLEdBQVI7QUFBQSxlQUFnQkEsTUFBTSxHQUFOLEdBQVlRLE1BQU1DLElBQU4sQ0FBVyxHQUFYLENBQTVCO0FBQUEsT0FETSxFQUVWQSxJQUZVLENBRUwsSUFGSyxFQUdWQyxLQUhVLEVBQWI7QUFJQSxXQUFLQyxHQUFMLENBQVNOLElBQVQ7QUFDRDs7Ozs7a0JBeEJrQmQsYyIsImZpbGUiOiJyZXJ1bl9mb3JtYXR0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgRm9ybWF0dGVyIGZyb20gJy4vJ1xuaW1wb3J0IFN0YXR1cyBmcm9tICcuLi9zdGF0dXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcnVuRm9ybWF0dGVyIGV4dGVuZHMgRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpXG4gICAgb3B0aW9ucy5ldmVudEJyb2FkY2FzdGVyXG4gICAgICAub24oJ3Rlc3QtY2FzZS1maW5pc2hlZCcsIDo6dGhpcy5zdG9yZUZhaWxlZFRlc3RDYXNlcylcbiAgICAgIC5vbigndGVzdC1ydW4tZmluaXNoZWQnLCA6OnRoaXMubG9nRmFpbGVkVGVzdENhc2VzKVxuICAgIHRoaXMubWFwcGluZyA9IHt9XG4gIH1cblxuICBzdG9yZUZhaWxlZFRlc3RDYXNlcyh7IHNvdXJjZUxvY2F0aW9uOiB7IGxpbmUsIHVyaSB9LCByZXN1bHQ6IHsgc3RhdHVzIH0gfSkge1xuICAgIGlmIChzdGF0dXMgIT09IFN0YXR1cy5QQVNTRUQpIHtcbiAgICAgIGlmICghdGhpcy5tYXBwaW5nW3VyaV0pIHtcbiAgICAgICAgdGhpcy5tYXBwaW5nW3VyaV0gPSBbXVxuICAgICAgfVxuICAgICAgdGhpcy5tYXBwaW5nW3VyaV0ucHVzaChsaW5lKVxuICAgIH1cbiAgfVxuXG4gIGxvZ0ZhaWxlZFRlc3RDYXNlcygpIHtcbiAgICBjb25zdCB0ZXh0ID0gXy5jaGFpbih0aGlzLm1hcHBpbmcpXG4gICAgICAubWFwKChsaW5lcywgdXJpKSA9PiB1cmkgKyAnOicgKyBsaW5lcy5qb2luKCc6JykpXG4gICAgICAuam9pbignXFxuJylcbiAgICAgIC52YWx1ZSgpXG4gICAgdGhpcy5sb2codGV4dClcbiAgfVxufVxuIl19