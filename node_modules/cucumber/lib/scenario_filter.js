'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _tag_expression_parser = require('cucumber-tag-expressions/lib/tag_expression_parser');

var _tag_expression_parser2 = _interopRequireDefault(_tag_expression_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEATURE_LINENUM_REGEXP = /^(.*?)((?::[\d]+)+)?$/;
var tagExpressionParser = new _tag_expression_parser2.default();

var ScenarioFilter = function () {
  function ScenarioFilter(_ref) {
    var featurePaths = _ref.featurePaths,
        names = _ref.names,
        tagExpression = _ref.tagExpression;
    (0, _classCallCheck3.default)(this, ScenarioFilter);

    this.featureUriToLinesMapping = this.getFeatureUriToLinesMapping(featurePaths || []);
    this.names = names || [];
    if (tagExpression) {
      this.tagExpressionNode = tagExpressionParser.parse(tagExpression || '');
    }
  }

  (0, _createClass3.default)(ScenarioFilter, [{
    key: 'getFeatureUriToLinesMapping',
    value: function getFeatureUriToLinesMapping(featurePaths) {
      var mapping = {};
      featurePaths.forEach(function (featurePath) {
        var match = FEATURE_LINENUM_REGEXP.exec(featurePath);
        if (match) {
          var uri = match[1];
          var linesExpression = match[2];
          if (linesExpression) {
            if (!mapping[uri]) {
              mapping[uri] = [];
            }
            linesExpression.slice(1).split(':').forEach(function (line) {
              mapping[uri].push(parseInt(line));
            });
          }
        }
      });
      return mapping;
    }
  }, {
    key: 'matches',
    value: function matches(scenario) {
      return this.matchesAnyLine(scenario) && this.matchesAnyName(scenario) && this.matchesAllTagExpressions(scenario);
    }
  }, {
    key: 'matchesAnyLine',
    value: function matchesAnyLine(scenario) {
      var lines = this.featureUriToLinesMapping[scenario.uri];
      if (lines) {
        return _lodash2.default.size(_lodash2.default.intersection(lines, scenario.lines)) > 0;
      } else {
        return true;
      }
    }
  }, {
    key: 'matchesAnyName',
    value: function matchesAnyName(scenario) {
      if (this.names.length === 0) {
        return true;
      }
      var scenarioName = scenario.name;
      return _lodash2.default.some(this.names, function (name) {
        return scenarioName.match(name);
      });
    }
  }, {
    key: 'matchesAllTagExpressions',
    value: function matchesAllTagExpressions(scenario) {
      if (!this.tagExpressionNode) {
        return true;
      }
      var scenarioTags = scenario.tags.map(function (t) {
        return t.name;
      });
      return this.tagExpressionNode.evaluate(scenarioTags);
    }
  }]);
  return ScenarioFilter;
}();

exports.default = ScenarioFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zY2VuYXJpb19maWx0ZXIuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9MSU5FTlVNX1JFR0VYUCIsInRhZ0V4cHJlc3Npb25QYXJzZXIiLCJTY2VuYXJpb0ZpbHRlciIsImZlYXR1cmVQYXRocyIsIm5hbWVzIiwidGFnRXhwcmVzc2lvbiIsImZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyIsImdldEZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyIsInRhZ0V4cHJlc3Npb25Ob2RlIiwicGFyc2UiLCJtYXBwaW5nIiwiZm9yRWFjaCIsIm1hdGNoIiwiZXhlYyIsImZlYXR1cmVQYXRoIiwidXJpIiwibGluZXNFeHByZXNzaW9uIiwic2xpY2UiLCJzcGxpdCIsImxpbmUiLCJwdXNoIiwicGFyc2VJbnQiLCJzY2VuYXJpbyIsIm1hdGNoZXNBbnlMaW5lIiwibWF0Y2hlc0FueU5hbWUiLCJtYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMiLCJsaW5lcyIsInNpemUiLCJpbnRlcnNlY3Rpb24iLCJsZW5ndGgiLCJzY2VuYXJpb05hbWUiLCJuYW1lIiwic29tZSIsInNjZW5hcmlvVGFncyIsInRhZ3MiLCJtYXAiLCJ0IiwiZXZhbHVhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEseUJBQXlCLHVCQUEvQjtBQUNBLElBQU1DLHNCQUFzQixxQ0FBNUI7O0lBRXFCQyxjO0FBQ25CLGdDQUFvRDtBQUFBLFFBQXRDQyxZQUFzQyxRQUF0Q0EsWUFBc0M7QUFBQSxRQUF4QkMsS0FBd0IsUUFBeEJBLEtBQXdCO0FBQUEsUUFBakJDLGFBQWlCLFFBQWpCQSxhQUFpQjtBQUFBOztBQUNsRCxTQUFLQyx3QkFBTCxHQUFnQyxLQUFLQywyQkFBTCxDQUM5QkosZ0JBQWdCLEVBRGMsQ0FBaEM7QUFHQSxTQUFLQyxLQUFMLEdBQWFBLFNBQVMsRUFBdEI7QUFDQSxRQUFJQyxhQUFKLEVBQW1CO0FBQ2pCLFdBQUtHLGlCQUFMLEdBQXlCUCxvQkFBb0JRLEtBQXBCLENBQTBCSixpQkFBaUIsRUFBM0MsQ0FBekI7QUFDRDtBQUNGOzs7O2dEQUUyQkYsWSxFQUFjO0FBQ3hDLFVBQU1PLFVBQVUsRUFBaEI7QUFDQVAsbUJBQWFRLE9BQWIsQ0FBcUIsdUJBQWU7QUFDbEMsWUFBTUMsUUFBUVosdUJBQXVCYSxJQUF2QixDQUE0QkMsV0FBNUIsQ0FBZDtBQUNBLFlBQUlGLEtBQUosRUFBVztBQUNULGNBQU1HLE1BQU1ILE1BQU0sQ0FBTixDQUFaO0FBQ0EsY0FBTUksa0JBQWtCSixNQUFNLENBQU4sQ0FBeEI7QUFDQSxjQUFJSSxlQUFKLEVBQXFCO0FBQ25CLGdCQUFJLENBQUNOLFFBQVFLLEdBQVIsQ0FBTCxFQUFtQjtBQUNqQkwsc0JBQVFLLEdBQVIsSUFBZSxFQUFmO0FBQ0Q7QUFDREMsNEJBQWdCQyxLQUFoQixDQUFzQixDQUF0QixFQUF5QkMsS0FBekIsQ0FBK0IsR0FBL0IsRUFBb0NQLE9BQXBDLENBQTRDLFVBQVNRLElBQVQsRUFBZTtBQUN6RFQsc0JBQVFLLEdBQVIsRUFBYUssSUFBYixDQUFrQkMsU0FBU0YsSUFBVCxDQUFsQjtBQUNELGFBRkQ7QUFHRDtBQUNGO0FBQ0YsT0FkRDtBQWVBLGFBQU9ULE9BQVA7QUFDRDs7OzRCQUVPWSxRLEVBQVU7QUFDaEIsYUFDRSxLQUFLQyxjQUFMLENBQW9CRCxRQUFwQixLQUNBLEtBQUtFLGNBQUwsQ0FBb0JGLFFBQXBCLENBREEsSUFFQSxLQUFLRyx3QkFBTCxDQUE4QkgsUUFBOUIsQ0FIRjtBQUtEOzs7bUNBRWNBLFEsRUFBVTtBQUN2QixVQUFNSSxRQUFRLEtBQUtwQix3QkFBTCxDQUE4QmdCLFNBQVNQLEdBQXZDLENBQWQ7QUFDQSxVQUFJVyxLQUFKLEVBQVc7QUFDVCxlQUFPLGlCQUFFQyxJQUFGLENBQU8saUJBQUVDLFlBQUYsQ0FBZUYsS0FBZixFQUFzQkosU0FBU0ksS0FBL0IsQ0FBUCxJQUFnRCxDQUF2RDtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sSUFBUDtBQUNEO0FBQ0Y7OzttQ0FFY0osUSxFQUFVO0FBQ3ZCLFVBQUksS0FBS2xCLEtBQUwsQ0FBV3lCLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxVQUFNQyxlQUFlUixTQUFTUyxJQUE5QjtBQUNBLGFBQU8saUJBQUVDLElBQUYsQ0FBTyxLQUFLNUIsS0FBWixFQUFtQixVQUFTMkIsSUFBVCxFQUFlO0FBQ3ZDLGVBQU9ELGFBQWFsQixLQUFiLENBQW1CbUIsSUFBbkIsQ0FBUDtBQUNELE9BRk0sQ0FBUDtBQUdEOzs7NkNBRXdCVCxRLEVBQVU7QUFDakMsVUFBSSxDQUFDLEtBQUtkLGlCQUFWLEVBQTZCO0FBQzNCLGVBQU8sSUFBUDtBQUNEO0FBQ0QsVUFBTXlCLGVBQWVYLFNBQVNZLElBQVQsQ0FBY0MsR0FBZCxDQUFrQjtBQUFBLGVBQUtDLEVBQUVMLElBQVA7QUFBQSxPQUFsQixDQUFyQjtBQUNBLGFBQU8sS0FBS3ZCLGlCQUFMLENBQXVCNkIsUUFBdkIsQ0FBZ0NKLFlBQWhDLENBQVA7QUFDRDs7Ozs7a0JBaEVrQi9CLGMiLCJmaWxlIjoic2NlbmFyaW9fZmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFRhZ0V4cHJlc3Npb25QYXJzZXIgZnJvbSAnY3VjdW1iZXItdGFnLWV4cHJlc3Npb25zL2xpYi90YWdfZXhwcmVzc2lvbl9wYXJzZXInXG5cbmNvbnN0IEZFQVRVUkVfTElORU5VTV9SRUdFWFAgPSAvXiguKj8pKCg/OjpbXFxkXSspKyk/JC9cbmNvbnN0IHRhZ0V4cHJlc3Npb25QYXJzZXIgPSBuZXcgVGFnRXhwcmVzc2lvblBhcnNlcigpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5hcmlvRmlsdGVyIHtcbiAgY29uc3RydWN0b3IoeyBmZWF0dXJlUGF0aHMsIG5hbWVzLCB0YWdFeHByZXNzaW9uIH0pIHtcbiAgICB0aGlzLmZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyA9IHRoaXMuZ2V0RmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nKFxuICAgICAgZmVhdHVyZVBhdGhzIHx8IFtdXG4gICAgKVxuICAgIHRoaXMubmFtZXMgPSBuYW1lcyB8fCBbXVxuICAgIGlmICh0YWdFeHByZXNzaW9uKSB7XG4gICAgICB0aGlzLnRhZ0V4cHJlc3Npb25Ob2RlID0gdGFnRXhwcmVzc2lvblBhcnNlci5wYXJzZSh0YWdFeHByZXNzaW9uIHx8ICcnKVxuICAgIH1cbiAgfVxuXG4gIGdldEZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyhmZWF0dXJlUGF0aHMpIHtcbiAgICBjb25zdCBtYXBwaW5nID0ge31cbiAgICBmZWF0dXJlUGF0aHMuZm9yRWFjaChmZWF0dXJlUGF0aCA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IEZFQVRVUkVfTElORU5VTV9SRUdFWFAuZXhlYyhmZWF0dXJlUGF0aClcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCB1cmkgPSBtYXRjaFsxXVxuICAgICAgICBjb25zdCBsaW5lc0V4cHJlc3Npb24gPSBtYXRjaFsyXVxuICAgICAgICBpZiAobGluZXNFeHByZXNzaW9uKSB7XG4gICAgICAgICAgaWYgKCFtYXBwaW5nW3VyaV0pIHtcbiAgICAgICAgICAgIG1hcHBpbmdbdXJpXSA9IFtdXG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmVzRXhwcmVzc2lvbi5zbGljZSgxKS5zcGxpdCgnOicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgbWFwcGluZ1t1cmldLnB1c2gocGFyc2VJbnQobGluZSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIG1hcHBpbmdcbiAgfVxuXG4gIG1hdGNoZXMoc2NlbmFyaW8pIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5tYXRjaGVzQW55TGluZShzY2VuYXJpbykgJiZcbiAgICAgIHRoaXMubWF0Y2hlc0FueU5hbWUoc2NlbmFyaW8pICYmXG4gICAgICB0aGlzLm1hdGNoZXNBbGxUYWdFeHByZXNzaW9ucyhzY2VuYXJpbylcbiAgICApXG4gIH1cblxuICBtYXRjaGVzQW55TGluZShzY2VuYXJpbykge1xuICAgIGNvbnN0IGxpbmVzID0gdGhpcy5mZWF0dXJlVXJpVG9MaW5lc01hcHBpbmdbc2NlbmFyaW8udXJpXVxuICAgIGlmIChsaW5lcykge1xuICAgICAgcmV0dXJuIF8uc2l6ZShfLmludGVyc2VjdGlvbihsaW5lcywgc2NlbmFyaW8ubGluZXMpKSA+IDBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBtYXRjaGVzQW55TmFtZShzY2VuYXJpbykge1xuICAgIGlmICh0aGlzLm5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgY29uc3Qgc2NlbmFyaW9OYW1lID0gc2NlbmFyaW8ubmFtZVxuICAgIHJldHVybiBfLnNvbWUodGhpcy5uYW1lcywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHNjZW5hcmlvTmFtZS5tYXRjaChuYW1lKVxuICAgIH0pXG4gIH1cblxuICBtYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMoc2NlbmFyaW8pIHtcbiAgICBpZiAoIXRoaXMudGFnRXhwcmVzc2lvbk5vZGUpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGNvbnN0IHNjZW5hcmlvVGFncyA9IHNjZW5hcmlvLnRhZ3MubWFwKHQgPT4gdC5uYW1lKVxuICAgIHJldHVybiB0aGlzLnRhZ0V4cHJlc3Npb25Ob2RlLmV2YWx1YXRlKHNjZW5hcmlvVGFncylcbiAgfVxufVxuIl19