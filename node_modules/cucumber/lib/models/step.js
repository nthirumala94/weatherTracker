'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _keyword_type = require('../keyword_type');

var _step_arguments = require('./step_arguments');

var _step_arguments2 = _interopRequireDefault(_step_arguments);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Step = function Step(options) {
  (0, _classCallCheck3.default)(this, Step);
  var backgroundLines = options.backgroundLines,
      gherkinData = options.gherkinData,
      language = options.language,
      lineToKeywordMapping = options.lineToKeywordMapping,
      previousStep = options.previousStep,
      scenario = options.scenario;


  this.arguments = _lodash2.default.map(gherkinData.arguments, _step_arguments2.default.build);
  this.line = _lodash2.default.last(_lodash2.default.map(gherkinData.locations, 'line'));
  this.name = gherkinData.text;
  this.scenario = scenario;
  this.uri = scenario.uri;

  this.isBackground = _lodash2.default.some(gherkinData.locations, function (_ref) {
    var line = _ref.line;

    return _lodash2.default.includes(backgroundLines, line);
  });

  this.keyword = _lodash2.default.chain(gherkinData.locations).map(function (_ref2) {
    var line = _ref2.line;
    return lineToKeywordMapping[line];
  }).compact().first().value();

  this.keywordType = (0, _keyword_type.getStepKeywordType)({
    language: language,
    previousStep: previousStep,
    step: this
  });
};

exports.default = Step;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvc3RlcC5qcyJdLCJuYW1lcyI6WyJTdGVwIiwib3B0aW9ucyIsImJhY2tncm91bmRMaW5lcyIsImdoZXJraW5EYXRhIiwibGFuZ3VhZ2UiLCJsaW5lVG9LZXl3b3JkTWFwcGluZyIsInByZXZpb3VzU3RlcCIsInNjZW5hcmlvIiwiYXJndW1lbnRzIiwibWFwIiwiYnVpbGQiLCJsaW5lIiwibGFzdCIsImxvY2F0aW9ucyIsIm5hbWUiLCJ0ZXh0IiwidXJpIiwiaXNCYWNrZ3JvdW5kIiwic29tZSIsImluY2x1ZGVzIiwia2V5d29yZCIsImNoYWluIiwiY29tcGFjdCIsImZpcnN0IiwidmFsdWUiLCJrZXl3b3JkVHlwZSIsInN0ZXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7Ozs7SUFFcUJBLEksR0FDbkIsY0FBWUMsT0FBWixFQUFxQjtBQUFBO0FBQUEsTUFFakJDLGVBRmlCLEdBUWZELE9BUmUsQ0FFakJDLGVBRmlCO0FBQUEsTUFHakJDLFdBSGlCLEdBUWZGLE9BUmUsQ0FHakJFLFdBSGlCO0FBQUEsTUFJakJDLFFBSmlCLEdBUWZILE9BUmUsQ0FJakJHLFFBSmlCO0FBQUEsTUFLakJDLG9CQUxpQixHQVFmSixPQVJlLENBS2pCSSxvQkFMaUI7QUFBQSxNQU1qQkMsWUFOaUIsR0FRZkwsT0FSZSxDQU1qQkssWUFOaUI7QUFBQSxNQU9qQkMsUUFQaUIsR0FRZk4sT0FSZSxDQU9qQk0sUUFQaUI7OztBQVVuQixPQUFLQyxTQUFMLEdBQWlCLGlCQUFFQyxHQUFGLENBQU1OLFlBQVlLLFNBQWxCLEVBQTZCLHlCQUFjRSxLQUEzQyxDQUFqQjtBQUNBLE9BQUtDLElBQUwsR0FBWSxpQkFBRUMsSUFBRixDQUFPLGlCQUFFSCxHQUFGLENBQU1OLFlBQVlVLFNBQWxCLEVBQTZCLE1BQTdCLENBQVAsQ0FBWjtBQUNBLE9BQUtDLElBQUwsR0FBWVgsWUFBWVksSUFBeEI7QUFDQSxPQUFLUixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLE9BQUtTLEdBQUwsR0FBV1QsU0FBU1MsR0FBcEI7O0FBRUEsT0FBS0MsWUFBTCxHQUFvQixpQkFBRUMsSUFBRixDQUFPZixZQUFZVSxTQUFuQixFQUE4QixnQkFBYztBQUFBLFFBQVhGLElBQVcsUUFBWEEsSUFBVzs7QUFDOUQsV0FBTyxpQkFBRVEsUUFBRixDQUFXakIsZUFBWCxFQUE0QlMsSUFBNUIsQ0FBUDtBQUNELEdBRm1CLENBQXBCOztBQUlBLE9BQUtTLE9BQUwsR0FBZSxpQkFBRUMsS0FBRixDQUFRbEIsWUFBWVUsU0FBcEIsRUFDWkosR0FEWSxDQUNSO0FBQUEsUUFBR0UsSUFBSCxTQUFHQSxJQUFIO0FBQUEsV0FBY04scUJBQXFCTSxJQUFyQixDQUFkO0FBQUEsR0FEUSxFQUVaVyxPQUZZLEdBR1pDLEtBSFksR0FJWkMsS0FKWSxFQUFmOztBQU1BLE9BQUtDLFdBQUwsR0FBbUIsc0NBQW1CO0FBQ3BDckIsc0JBRG9DO0FBRXBDRSw4QkFGb0M7QUFHcENvQixVQUFNO0FBSDhCLEdBQW5CLENBQW5CO0FBS0QsQzs7a0JBaENrQjFCLEkiLCJmaWxlIjoic3RlcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IGdldFN0ZXBLZXl3b3JkVHlwZSB9IGZyb20gJy4uL2tleXdvcmRfdHlwZSdcbmltcG9ydCBTdGVwQXJndW1lbnRzIGZyb20gJy4vc3RlcF9hcmd1bWVudHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0ZXAge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZExpbmVzLFxuICAgICAgZ2hlcmtpbkRhdGEsXG4gICAgICBsYW5ndWFnZSxcbiAgICAgIGxpbmVUb0tleXdvcmRNYXBwaW5nLFxuICAgICAgcHJldmlvdXNTdGVwLFxuICAgICAgc2NlbmFyaW9cbiAgICB9ID0gb3B0aW9uc1xuXG4gICAgdGhpcy5hcmd1bWVudHMgPSBfLm1hcChnaGVya2luRGF0YS5hcmd1bWVudHMsIFN0ZXBBcmd1bWVudHMuYnVpbGQpXG4gICAgdGhpcy5saW5lID0gXy5sYXN0KF8ubWFwKGdoZXJraW5EYXRhLmxvY2F0aW9ucywgJ2xpbmUnKSlcbiAgICB0aGlzLm5hbWUgPSBnaGVya2luRGF0YS50ZXh0XG4gICAgdGhpcy5zY2VuYXJpbyA9IHNjZW5hcmlvXG4gICAgdGhpcy51cmkgPSBzY2VuYXJpby51cmlcblxuICAgIHRoaXMuaXNCYWNrZ3JvdW5kID0gXy5zb21lKGdoZXJraW5EYXRhLmxvY2F0aW9ucywgKHsgbGluZSB9KSA9PiB7XG4gICAgICByZXR1cm4gXy5pbmNsdWRlcyhiYWNrZ3JvdW5kTGluZXMsIGxpbmUpXG4gICAgfSlcblxuICAgIHRoaXMua2V5d29yZCA9IF8uY2hhaW4oZ2hlcmtpbkRhdGEubG9jYXRpb25zKVxuICAgICAgLm1hcCgoeyBsaW5lIH0pID0+IGxpbmVUb0tleXdvcmRNYXBwaW5nW2xpbmVdKVxuICAgICAgLmNvbXBhY3QoKVxuICAgICAgLmZpcnN0KClcbiAgICAgIC52YWx1ZSgpXG5cbiAgICB0aGlzLmtleXdvcmRUeXBlID0gZ2V0U3RlcEtleXdvcmRUeXBlKHtcbiAgICAgIGxhbmd1YWdlLFxuICAgICAgcHJldmlvdXNTdGVwLFxuICAgICAgc3RlcDogdGhpc1xuICAgIH0pXG4gIH1cbn1cbiJdfQ==