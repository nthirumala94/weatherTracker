{
  "_args": [
    [
      {
        "raw": "./assets/c1-code-test-take-home-tester-0.7.1.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "./assets/c1-code-test-take-home-tester-0.7.1.tgz",
        "spec": "/home/ubuntu/fullstack/project/assets/c1-code-test-take-home-tester-0.7.1.tgz",
        "type": "local"
      },
      "/home/ubuntu/fullstack/project"
    ]
  ],
  "_from": "assets/c1-code-test-take-home-tester-0.7.1.tgz",
  "_id": "@c1-code-test/take-home-tester@0.7.1",
  "_inCache": true,
  "_location": "/@c1-code-test/take-home-tester",
  "_phantomChildren": {},
  "_requested": {
    "raw": "./assets/c1-code-test-take-home-tester-0.7.1.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "./assets/c1-code-test-take-home-tester-0.7.1.tgz",
    "spec": "/home/ubuntu/fullstack/project/assets/c1-code-test-take-home-tester-0.7.1.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:assets/c1-code-test-take-home-tester-0.7.1.tgz",
  "_shasum": "5a459095c11003c1fcbb0f57e1ce0016c2b1dec3",
  "_shrinkwrap": null,
  "_spec": "./assets/c1-code-test-take-home-tester-0.7.1.tgz",
  "_where": "/home/ubuntu/fullstack/project",
  "author": "",
  "babel": {
    "sourceMaps": true,
    "plugins": [
      "add-module-exports"
    ],
    "presets": [
      "stage-2",
      [
        "env",
        {
          "targets": {
            "node": "6.5"
          },
          "exclude": [
            "transform-regenerator"
          ]
        }
      ]
    ]
  },
  "bin": {
    "take-home-integration-test": "dist/bin/take-home-integration-test.js"
  },
  "dependencies": {
    "chai": "^4.0.2",
    "chai-as-promised": "^7.0.0",
    "cli-table": "^0.3.1",
    "commander": "^2.10.0",
    "cucumber": "3.0.1",
    "debug": "^3.0.1",
    "dirty-chai": "^2.0.0",
    "get-stream": "^3.0.0",
    "indent-string": "^3.2.0",
    "ramda": "^0.24.1",
    "request": "^2.81.0",
    "request-debug": "^0.2.0",
    "request-promise": "^4.2.1",
    "source-map-support": "^0.4.16",
    "strip-ansi": "^4.0.0",
    "verror": "^1.10.0"
  },
  "description": "This is a tool to run a suite of integration tests to be run against submissions for the Capital One Developer Evaluation (CODE) Take Home Test.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-env": "^1.5.2",
    "babel-preset-stage-2": "^6.24.1",
    "babel-register": "^6.26.0",
    "eslint": "^4.5.0"
  },
  "engine": {
    "node": ">=6.5"
  },
  "engineStrict": true,
  "license": "UNLICENSED",
  "main": "index.js",
  "name": "@c1-code-test/take-home-tester",
  "optionalDependencies": {},
  "readme": "# Take Home Tester\n\nThis is a tool to run a suite of integration tests to be run against submissions for the Capital One Developer Evaluation (CODE) Take Home Test.\n\n## Installation\n\n`take-home-tester` is published as a [scoped package](https://docs.npmjs.com/misc/scope) under the `@c1-code-test` scope.\nThe `@c1-code-test` scope is used to associate packages to the Capital One internal npm registry provided by [Artifactory](https://artifactory.cloud.capitalone.com).\n\nTo add the `@c1-code-test` scope to your npm configuration (you only need to do this once, globally), run:\n\n```shell\n$ curl -sSu $USER https://artifactory.cloud.capitalone.com/artifactory/api/npm/npm-internalfacing/auth/cdi >> ~/.npmrc\n```\n\nThen you can install `@c1-code-test/take-home-tester` with `npm` or [`yarn`](https://yarnpkg.com/).\n\n```shell\n$ npm install --global @c1-code-test/take-home-tester\n\n# Or\n\n$ yarn global add @c1-code-test/take-home-tester\n```\n\n## Usage\n\nThe tester assumes the system under test (SUT) is in the current working directory.\n\n```\n$ take-home-integration-test --help\n\n  Usage: take-home-integration-test [options] [feature-files...] [-- <cucumber-args ...>]\n\n\n  Options:\n\n    -p, --port <port>      The port to bind\n    -h, --host <hostname>  The host to bind\n    -c, --command <cmd>    The command to run to start the server\n    -s, --score            Print the score\n    -D, --no-debug         Disable debug output\n    -C, --no-colors        Disable color output\n    -h, --help             output usage information\n```\n\n`--command` is the only required argument and will be run in a sub-shell with the following environment variables:\n\n|     Name     |             Value             |\n| ------------ | ----------------------------- |\n| `PATH`       | Inherited from parent context |\n| `DEBUG`      | Inherited from parent context |\n| `NODE_DEBUG` | Inherited from parent context |\n| `PORT`       | Value of `--port`             |\n| `HOST`       | Value of `--host`             |\n\nFor instance, you can run a NodeJS-based program like so:\n\n```sh\n$ take-home-integration-test --command 'npm start -- --port $PORT --host $HOST'\n```\n\nNote that in bash, you must use single quotes to prevent the variables from being interpolated in the parent shell.\n\nIf `feature-files` are specified, they will be run.\nOtherwise, the included feature files will be run.\n\nTo enable debug logging, use:\n\n```sh\n$ DEBUG=take-home-tester:* take-home-integration-test --command <cmd>\n```\n\nAll options specified after `--` are forwarded to the Cucumber CLI. Please see the [Cucumber docs](https://cucumber.io/docs/reference#command-line) for more detail.\n\n```sh\n$ take-home-integration-test -- --fail-fast\n```\n\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "babel src -d dist --source-maps",
    "lint": "eslint src",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.7.1"
}
