{"version":3,"sources":["../../src/lib/runner_BASE_17985.js"],"names":["log","connectAttempts","connectDelayMS","connectTimeoutDelay","signalWaitTime","signalEscalation","Runner","maxConnectTimeout","constructor","runConfig","start","command","host","port","env","PATH","process","DEBUG","NODE_DEBUG","PORT","HOST","child","spawn","detached","stdio","once","code","signal","pid","isStopping","stop","exitPromise","resolve","kill","timeout","catchReturn","Error","forceStop","waitForServerAvailable","remaining","ok","socket","connect","end","delay","waitForServerUnavailable","cmd","opts","proc","args","split","setTimeout","error"],"mappings":"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","file":"runner_BASE_17985.js","sourcesContent":["import { createConnection } from 'net';\nimport { spawn as libSpawn } from 'child_process';\nimport Bluebird from 'bluebird';\nimport debug from 'debug';\n\nconst log = debug('take-home-tester:child-process');\n\nconst connectAttempts = 10;\nconst connectDelayMS = 1000;\nconst connectTimeoutDelay = 200;\n\nconst signalWaitTime = 1000;\n\nconst signalEscalation = [ 'SIGINT', 'SIGTERM', 'SIGKILL' ];\n\nexport class Runner {\n  static get maxConnectTimeout() {\n    return connectAttempts * (connectDelayMS + connectTimeoutDelay);\n  }\n\n  constructor(runConfig) {\n    this.runConfig = runConfig;\n  }\n\n  start() {\n    const { command, host, port } = this.runConfig;\n\n    const env = {\n      PATH: process.env.PATH,\n      DEBUG: process.env.DEBUG,\n      NODE_DEBUG: process.env.NODE_DEBUG,\n      PORT: port,\n      HOST: host,\n    };\n\n    log('Spawning', { command, env });\n\n    this.child = spawn(command, {\n      env,\n      detached: true,\n      stdio: [ 'ignore', 'pipe', 'pipe' ],\n    });\n\n    this.child.once('exit', (code, signal) => {\n      log(`Child pid ${this.child.pid} has exited with ${code ? `code ${code}` : signal}`);\n      this.child = null;\n      this.isStopping = false;\n    });\n  }\n\n  async stop() {\n    if (!this.child) return;\n\n    const exitPromise = new Bluebird(resolve => this.child.once('exit', resolve));\n\n    if (this.isStopping) {\n      await exitPromise;\n      return;\n    }\n\n    this.isStopping = true;\n\n    for (const signal of signalEscalation) {\n      kill(this.child, signal);\n      await exitPromise.timeout(signalWaitTime).catchReturn();\n      if (!this.child) return;\n    }\n\n    throw new Error(`Could not kill process ${this.child.pid}`);\n  }\n\n  forceStop() {\n    if (!this.child) return;\n\n    log('FORCE stopping runner');\n    kill(this.child, 'SIGKILL');\n  }\n\n  async waitForServerAvailable() {\n    for (let remaining = connectAttempts; remaining > 0; remaining--) {\n      if (!this.child) {\n        log('Child closed unexpectedly');\n        break;\n      }\n\n      log('Waiting for server to become available. Attempts remaining: ', remaining);\n\n      const { ok, socket } = await connect(this.runConfig);\n\n      if (ok) {\n        socket.end();\n        return;\n      } else {\n        await Bluebird.delay(connectDelayMS);\n      }\n    }\n\n    throw new Error('Unable to connect to server.');\n  }\n\n  async waitForServerUnavailable() {\n    for (let remaining = connectAttempts; remaining > 0; remaining--) {\n      log('Waiting for server to become unavailable. Attempts remaining: ', remaining);\n\n      const { ok, socket } = await connect(this.runConfig);\n\n      if (ok) { // wait for the socket to fail\n        socket.end();\n        await Bluebird.delay(connectDelayMS);\n      } else {\n        return;\n      }\n    }\n\n    throw new Error('Timed out waiting for server to exit.');\n  }\n}\n\nfunction spawn(cmd, opts) {\n  const [ proc, ...args ] = cmd.split(' ');\n  return libSpawn(proc, args, opts);\n}\n\nfunction connect({ host, port, timeout = connectTimeoutDelay }) {\n  log('connect', { host, port, timeout });\n\n  return new Bluebird(resolve => {\n    const socket = createConnection(port, host);\n\n    socket.setTimeout(timeout);\n\n    socket\n      .once('connect', () => resolve({ ok: true, socket }))\n      .once('error', error => resolve({ ok: false, error }));\n  });\n}\n\nfunction kill(child, signal) {\n  const pid = -child.pid; // kill the child group\n  log(`Sending ${signal} to pid ${pid}`);\n  process.kill(pid, signal);\n}\n"]}