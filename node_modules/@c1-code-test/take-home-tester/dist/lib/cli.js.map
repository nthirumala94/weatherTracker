{"version":3,"sources":["../../src/lib/cli.js"],"names":["R","Bluebird","Cli","constructor","options","cwd","cucumberArgs","stdout","argv","runner","pick","eventBroadcaster","getSupportCodeLibrary","supportCodePaths","Object","defineProperties","methods","enumerable","value","getConfiguration","builder","featurePaths","stepPaths","getUnexpandedFeaturePaths","args","length","prototype","call","resolve","require","push","config","build","debug","formats","type","score","filter","f","run","configuration","supportCodeLibrary","cleanup","initializeFormatters","formatOptions","testCases","pickleFilter","pickleFilterOptions","runtime","runtimeOptions","once","dryRun","result","success","start","precheck","host","port","runConfig","waitForServerUnavailable","err","ok","message","output","waitForServerAvailable","forceStop","log","stop","gracefullyExit","emit","forceExit"],"mappings":"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","file":"cli.js","sourcesContent":["import {\n  Cli as CucumberCli,\n  supportCodeLibraryBuilder,\n  Runtime,\n  getTestCasesFromFilesystem,\n  PickleFilter,\n} from 'cucumber';\nimport ConfigurationBuilder from 'cucumber/lib/cli/configuration_builder';\nimport * as R from 'ramda';\nimport { Runner } from './runner';\nimport EventEmitter from 'events';\nimport { fence } from '../lib/format';\nimport * as Bluebird from 'bluebird';\n\nexport class Cli extends CucumberCli {\n  constructor({ options, cwd, cucumberArgs, stdout  }) {\n    super({\n      cwd, stdout,\n      argv: [ null, '', ...cucumberArgs ],\n    });\n\n    this.options = options;\n    this.runner = new Runner(R.pick([ 'host', 'port', 'command' ], options));\n    this.eventBroadcaster = new EventEmitter();\n  }\n\n  getSupportCodeLibrary(supportCodePaths) {\n    Object.defineProperties(supportCodeLibraryBuilder.methods, {\n      runner: {\n        enumerable: true,\n        value: this.runner,\n      },\n      eventBroadcaster: {\n        enumerable: true,\n        value: this.eventBroadcaster,\n      },\n    });\n\n    return super.getSupportCodeLibrary(supportCodePaths);\n  }\n\n  async getConfiguration() {\n    const builder = new ConfigurationBuilder({ argv: this.argv, cwd: this.cwd });\n\n    const { featurePaths, stepPaths } = this.options;\n    builder.getUnexpandedFeaturePaths = function () {\n      if (this.args.length > 0)\n        return ConfigurationBuilder.prototype.getUnexpandedFeaturePaths.call(this);\n      else\n        return Bluebird.resolve(featurePaths);\n    };\n\n    builder.options.require.push(...stepPaths);\n\n    const config = await builder.build();\n\n    if (this.options.debug)\n      config.formats = [ { type: require.resolve('../formatters/debug-formatter') } ];\n\n    if (this.options.score)\n      config.formats.push({ type: require.resolve('../formatters/score-formatter') });\n    else\n      config.formats.push({ type: require.resolve('../formatters/strip-points-formatter') });\n\n    config.formats = config.formats.filter(f => f.type !== 'none');\n\n    return config;\n  }\n\n  async run() {\n    const configuration = await this.getConfiguration();\n    const supportCodeLibrary = this.getSupportCodeLibrary(configuration.supportCodePaths);\n    const cleanup = await this.initializeFormatters({\n      supportCodeLibrary,\n      eventBroadcaster: this.eventBroadcaster,\n      formatOptions: configuration.formatOptions,\n      formats: configuration.formats,\n    });\n\n    const testCases = getTestCasesFromFilesystem({\n      cwd: this.cwd,\n      eventBroadcaster: this.eventBroadcaster,\n      featurePaths: configuration.featurePaths,\n      pickleFilter: new PickleFilter(configuration.pickleFilterOptions),\n    });\n\n    const runtime = new Runtime({\n      eventBroadcaster: this.eventBroadcaster,\n      options: configuration.runtimeOptions,\n      supportCodeLibrary,\n      testCases,\n    });\n\n    this.eventBroadcaster.once('abort', () => {\n      configuration.runtimeOptions.dryRun = true;\n      runtime.result.success = false;\n    });\n\n    try {\n      return await runtime.start();\n    } finally {\n      await cleanup();\n    }\n  }\n\n  async precheck() {\n    const { host, port } = this.runner.runConfig;\n\n    try {\n      await this.runner.waitForServerUnavailable();\n    } catch (err) {\n      return {\n        ok: false,\n        message: `${host}:${port} appears to be in use. Cannot start tests.`,\n      };\n    }\n\n    const output = this.runner.start();\n    try {\n      await this.runner.waitForServerAvailable();\n    } catch (err) {\n      this.runner.forceStop();\n      const log = await output;\n      return {\n        ok: false,\n        message: `Could not connect to ${host}:${port}\n${fence('console log', log)}`,\n      };\n    }\n\n    await this.runner.stop();\n\n    return { ok: true };\n  }\n\n  gracefullyExit() {\n    this.eventBroadcaster.emit('abort');\n    this.runner.stop();\n  }\n\n  forceExit() {\n    this.eventBroadcaster.emit('abort');\n    this.runner.forceStop();\n  }\n}\n\n"]}