{"version":3,"sources":["../../src/formatters/debug-formatter.js"],"names":["log","eventBroadcaster","eventDataCollector","colorFns","netLog","on","ev","result","logTestCase","testRun","formatSummary","testCaseMap","copyToNetlog","eventName","data","push","type","sourceLocation","status","AMBIGUOUS","FAILED","logFullDetails","SKIPPED","PENDING","PASSED","logShort","pickle","testCase","getTestCaseData","bullet","name","visitor","scenarioStatus","getAggregateStatus","getSteps","step","testStep","keyword","pickleStep","text","dataTable","formatDataTable","docString","formatDocString","exception","errView","Object","create","stack","formatError","consoleLog","arg","rows","map","row","cells","cell","value","replace","table","chars","bottom","left","mid","middle","right","top","style","border","toString","content","steps"],"mappings":"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","file":"debug-formatter.js","sourcesContent":["import { Status, formatterHelpers } from 'cucumber';\nimport Table from 'cli-table';\nimport { createTestCaseVisitor } from '../lib/test-case-visitor';\nimport indent from 'indent-string';\nimport { statusCharacters } from './characters';\nimport { fence } from '../lib/format';\n\nexport default function ({ log, eventBroadcaster, eventDataCollector, colorFns }) {\n  let netLog = null;\n\n  eventBroadcaster.on('test-case-started', () => {\n    netLog = [];\n  });\n\n  eventBroadcaster.on('test-case-finished', ev => {\n    ev.result.netLog = netLog;\n    netLog = null;\n\n    logTestCase(ev);\n  });\n\n  eventBroadcaster.on('test-run-finished', testRun => {\n    log('\\n');\n    log(formatterHelpers.formatSummary({\n      colorFns, testRun,\n      testCaseMap: eventDataCollector.testCaseMap,\n    }));\n  });\n\n  copyToNetlog('request');\n  copyToNetlog('response');\n\n  function copyToNetlog(eventName) {\n    eventBroadcaster.on(eventName, data => netLog.push({ type: eventName, data }));\n  }\n\n  function logTestCase({ result, sourceLocation }) {\n    switch (result.status) {\n      case Status.AMBIGUOUS:\n      case Status.FAILED:\n        logFullDetails(sourceLocation);\n        break;\n\n      case Status.SKIPPED:\n      case Status.PENDING:\n      case Status.PASSED:\n        logShort(sourceLocation);\n        break;\n\n      default:\n        logFullDetails(sourceLocation);\n        break;\n    }\n  }\n\n  function logShort(sourceLocation) {\n    const { pickle, testCase: { result: { status } } } = eventDataCollector.getTestCaseData(sourceLocation);\n    const bullet = statusCharacters[status];\n    log(colorFns[status](`${bullet} Scenario: ${pickle.name}\\n`));\n  }\n\n  function logFullDetails(sourceLocation) {\n    const visitor = createTestCaseVisitor(eventDataCollector.getTestCaseData(sourceLocation));\n\n    const scenarioStatus = getAggregateStatus(visitor.getSteps());\n    log(colorFns[scenarioStatus](`${statusCharacters[scenarioStatus]} Scenario: ${visitor.pickle.name}\\n`));\n\n    for (const step of visitor.getSteps()) {\n      const { result } = step.testStep;\n      log(colorFns[result.status](`  ${statusCharacters[result.status]} ${step.keyword}${step.pickleStep.text}\\n`));\n\n      if (step.dataTable)\n        log(indent(formatDataTable(step.dataTable), 8));\n      else if (step.docString)\n        log(indent(formatDocString(step.docString), 8));\n\n      if (result.exception) {\n        const errView = Object.create(result.exception);\n        errView.stack = null;\n        log(indent(formatterHelpers.formatError(errView, colorFns), 4));\n        log('\\n');\n      }\n    }\n\n\n    log(indent(fence('console log', visitor.testCase.result.consoleLog), 6));\n    log(indent(fence('request log', visitor.testCase.result.netLog), 6));\n    log('\\n');\n  }\n}\n\nfunction formatDataTable(arg) {\n  const rows = arg.rows\n    .map(row => row.cells\n      .map(cell => cell.value\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\n')));\n\n  const table = new Table({\n    chars: {\n      bottom: '',\n      'bottom-left': '',\n      'bottom-mid': '',\n      'bottom-right': '',\n      left: '|',\n      'left-mid': '',\n      mid: '',\n      'mid-mid': '',\n      middle: '|',\n      right: '|',\n      'right-mid': '',\n      top: '',\n      'top-left': '',\n      'top-mid': '',\n      'top-right': '',\n    },\n    style: {\n      border: [],\n      'padding-left': 1,\n      'padding-right': 1,\n    },\n  });\n\n  table.push(...rows);\n  return `${table.toString()}\\n`;\n}\n\nfunction formatDocString(arg) {\n  return `\"\"\"\n${arg.content}\n\"\"\"\n`;\n}\n\nfunction getAggregateStatus(steps) {\n  let status = Status.PASSED;\n  for (const { testStep: { result } } of steps) {\n    switch (result.status) {\n      case Status.FAILED: return Status.FAILED;\n      case Status.PASSED: break;\n      default: status = result.status;\n    }\n  }\n\n  return status;\n}\n"]}