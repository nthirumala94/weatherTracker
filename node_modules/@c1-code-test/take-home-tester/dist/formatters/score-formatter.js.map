{"version":3,"sources":["../../src/formatters/score-formatter.js"],"names":["ScoreFormatter","constructor","options","eventBroadcaster","on","handleTestRunFinished","table","head","colAligns","style","chars","top","bottom","left","mid","right","middle","totalPoints","totalEarned","getScenarios","eventDataCollector","name","status","tags","points","getPointValue","earned","PASSED","color","colorFns","indicator","push","bold","log","toString","pointRegexp","tag","matches","exec","testCaseMap","pickleMap","key","hasOwnProperty","result"],"mappings":"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","file":"score-formatter.js","sourcesContent":["import { Formatter, Status } from 'cucumber';\nimport Table from 'cli-table';\nimport { statusCharacters } from './characters';\n\nexport default class ScoreFormatter extends Formatter {\n  constructor(options) {\n    super(options);\n    const { eventBroadcaster } = options;\n\n    eventBroadcaster.on('test-run-finished', () => this.handleTestRunFinished());\n  }\n  handleTestRunFinished() {\n    const table = new Table({\n      head: [ 'Scenario', 'Points', 'Earned' ],\n      colAligns: [ 'left', 'right', 'right' ],\n      style: {\n        head: [ 'bold', 'blue', 'inverse' ],\n      },\n      chars: {\n        top: '─', 'top-mid': '─', 'top-left': '┌', 'top-right': '┐',\n        bottom: '─', 'bottom-mid': '─', 'bottom-left': '└', 'bottom-right': '┘',\n        left: '│', 'left-mid': '', mid: '', 'mid-mid': '',\n        right: '│', 'right-mid': '', middle: ' ',\n      },\n    });\n\n    let totalPoints = 0;\n    let totalEarned = 0;\n\n    for (const { name, status, tags } of getScenarios(this.eventDataCollector)) {\n      const points = getPointValue(tags);\n      const earned = status === Status.PASSED ? points : 0;\n\n      totalPoints += points;\n      totalEarned += earned;\n\n      const color = this.colorFns[status];\n      const indicator = statusCharacters[status];\n\n      table.push([ `${color(indicator)} ${name}`, points, color(earned) ]);\n    }\n\n    table.push([ '', '══════', '══════' ], [\n      this.colorFns.bold('TOTAL'),\n      this.colorFns.bold(totalPoints),\n      this.colorFns.bold(totalEarned),\n    ]);\n\n    this.log(`${table.toString()}\\n\\n`);\n\n    this.log(`FS_SCORE:${totalEarned}%\\n`);\n  }\n}\n\nconst pointRegexp = /^@points=(\\d{1,2})$/;\n\nfunction getPointValue(tags) {\n  for (const tag of tags) {\n    const matches = pointRegexp.exec(tag.name);\n    if (matches)\n      return +matches[1];\n  }\n\n  return 0;\n}\n\nfunction* getScenarios({ testCaseMap, pickleMap }) {\n  for (const key in testCaseMap) {\n    if (!testCaseMap.hasOwnProperty(key)) continue;\n\n    const { name, tags } = pickleMap[key];\n    const { result: { status } } = testCaseMap[key];\n\n    yield { name, tags, status };\n  }\n}\n"]}