{"version":3,"sources":["../../src/bin/take-home-integration-test.js"],"names":["Bluebird","R","config","longStackTraces","usage","option","parse","process","argv","command","console","log","outputHelp","exit","global","program","cli","cwd","options","featurePaths","__dirname","stepPaths","pick","cucumberArgs","args","stdout","getOutStream","colors","on","reason","gracefullyExit","forceExit","precheck","then","ok","message","run","catch","err","error","enableColors","out","pipe"],"mappings":";;;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;IAAYA,Q;;AACZ;;AACA;;AACA;;IAAYC,C;;;;;;AAEZD,SAASE,MAAT,CAAgB,EAAEC,iBAAiB,IAAnB,EAAhB;;AAEA;;AAEA,oBACGC,KADH,CACS,oDADT,EAEGC,MAFH,CAEU,qBAFV,EAEiC,wCAFjC,EAE2E,IAF3E,EAGGA,MAHH,CAGU,mBAHV,EAG+B,kBAH/B,EAGmD,IAHnD,EAIGA,MAJH,CAIU,uBAJV,EAImC,kBAJnC,EAIuD,WAJvD,EAKGA,MALH,CAKU,aALV,EAKyB,iBALzB,EAMGA,MANH,CAMU,gBANV,EAM4B,sBAN5B,EAOGA,MAPH,CAOU,iBAPV,EAO6B,sBAP7B,EAQGC,KARH,CAQSC,QAAQC,IARjB;;AAUA,IAAI,CAAC,oBAAQC,OAAb,EAAsB;AACpBC,UAAQC,GAAR,CAAY,uBAAZ;;AAEA,sBAAQC,UAAR;AACAL,UAAQM,IAAR,CAAa,CAAb;AACD;;AAEDC,OAAOC,OAAP;;AAEA,MAAMC,MAAM,aAAQ;AAClBC,OAAKV,QAAQU,GAAR,EADa;AAElBC;AACEC,kBAAc,CAAE,mBAAYC,SAAZ,EAAuB,gBAAvB,CAAF,CADhB;AAEEC,eAAW,CAAE,mBAAYD,SAAZ,EAAuB,UAAvB,CAAF;AAFb,KAGKnB,EAAEqB,IAAF,CAAO,CACR,QADQ,EAER,OAFQ,EAGR,OAHQ,EAIR,MAJQ,EAKR,MALQ,EAMR,SANQ,CAAP,sBAHL,CAFkB;AAclBC,gBAAc,oBAAQC,IAdJ;AAelBC,UAAQC,aAAa,oBAAQC,MAArB;AAfU,CAAR,CAAZ;;AAkBApB,QAAQqB,EAAR,CAAW,oBAAX,EAAiCC,UAAU;AACzCnB,UAAQC,GAAR,CAAY,qBAAZ,EAAmCkB,MAAnC;AACD,CAFD;;AAIAtB,QACGqB,EADH,CACM,QADN,EACgB,MAAMZ,IAAIc,cAAJ,EADtB,EAEGF,EAFH,CAEM,QAFN,EAEgB,MAAMZ,IAAIc,cAAJ,EAFtB,EAGGF,EAHH,CAGM,SAHN,EAGiB,MAAMZ,IAAIc,cAAJ,EAHvB,EAIGF,EAJH,CAIM,SAJN,EAIiB,MAAMZ,IAAIe,SAAJ,EAJvB,EAKGH,EALH,CAKM,MALN,EAKc,MAAMZ,IAAIe,SAAJ,EALpB;;AAOAf,IACGgB,QADH,GAEGC,IAFH,CAEQ,CAAC,EAAEC,EAAF,EAAMC,OAAN,EAAD,KAAqB;AACzB,MAAID,EAAJ,EACE,OAAOlB,IAAIoB,GAAJ,EAAP;;AAEF1B,UAAQC,GAAR,CAAYwB,OAAZ;AACA,SAAO,IAAP;AACD,CARH,EASGE,KATH,CASSC,OAAO;AACZ5B,UAAQ6B,KAAR,CAAc,uBAAYD,GAAZ,CAAd;AACA/B,UAAQM,IAAR,CAAa,CAAb;AACD,CAZH;;AAeA,SAASa,YAAT,CAAsBc,YAAtB,EAAoC;AAClC,MAAIA,YAAJ,EAAkB,OAAOjC,QAAQkB,MAAf;;AAElB,QAAMgB,MAAM,gCAAZ;AACAA,MAAIC,IAAJ,CAASnC,QAAQkB,MAAjB;;AAEA,SAAOgB,GAAP;AACD","file":"take-home-integration-test.js","sourcesContent":["\n\nimport program from 'commander';\nimport { install as installSourceMapSupport } from 'source-map-support';\nimport { resolve as resolvePath } from 'path';\nimport { fullStack as formatStack } from 'verror';\nimport * as Bluebird from 'bluebird';\nimport { Cli } from '../lib/cli';\nimport { StripAnsiTransform } from '../lib/format';\nimport * as R from 'ramda';\n\nBluebird.config({ longStackTraces: true });\n\ninstallSourceMapSupport();\n\nprogram\n  .usage('--command <cmd> [options] [-- <cucumber-args ...>]')\n  .option('-c, --command <cmd>', 'The command to run to start the server', null)\n  .option('-p, --port <port>', 'The port to bind', 8000)\n  .option('-h, --host <hostname>', 'The host to bind', 'localhost')\n  .option('-s, --score', 'Print the score')\n  .option('-D, --no-debug', 'Disable debug output')\n  .option('-C, --no-colors', 'Disable color output')\n  .parse(process.argv);\n\nif (!program.command) {\n  console.log('--command is required');\n\n  program.outputHelp();\n  process.exit(1);\n}\n\nglobal.program = program;\n\nconst cli = new Cli({\n  cwd: process.cwd(),\n  options: {\n    featurePaths: [ resolvePath(__dirname, '../../features') ],\n    stepPaths: [ resolvePath(__dirname, '../steps') ],\n    ...R.pick([\n      'colors',\n      'score',\n      'debug',\n      'port',\n      'host',\n      'command',\n    ], program),\n  },\n  cucumberArgs: program.args,\n  stdout: getOutStream(program.colors),\n});\n\nprocess.on('unhandledRejection', reason => {\n  console.log('UNHANDLED REJECTION', reason);\n});\n\nprocess\n  .on('SIGHUP', () => cli.gracefullyExit())\n  .on('SIGINT', () => cli.gracefullyExit())\n  .on('SIGQUIT', () => cli.gracefullyExit())\n  .on('SIGTERM', () => cli.forceExit())\n  .on('exit', () => cli.forceExit());\n\ncli\n  .precheck()\n  .then(({ ok, message }) => {\n    if (ok)\n      return cli.run();\n\n    console.log(message);\n    return null;\n  })\n  .catch(err => {\n    console.error(formatStack(err));\n    process.exit(1);\n  });\n\n\nfunction getOutStream(enableColors) {\n  if (enableColors) return process.stdout;\n\n  const out = new StripAnsiTransform();\n  out.pipe(process.stdout);\n\n  return out;\n}\n"]}