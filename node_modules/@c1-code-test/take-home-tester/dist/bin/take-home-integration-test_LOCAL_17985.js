#! /usr/bin/env node
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _sourceMapSupport = require('source-map-support');

var _path = require('path');

var _verror = require('verror');

var _bluebird = require('bluebird');

var Bluebird = _interopRequireWildcard(_bluebird);

var _cli = require('../lib/cli');

var _stripAnsi = require('../lib/strip-ansi');

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Bluebird.config({ longStackTraces: true });

(0, _sourceMapSupport.install)();

_commander2.default.usage('[options] [-- <cucumber-args ...>]').option('-p, --port <port>', 'The port to bind', 8000).option('-h, --host <hostname>', 'The host to bind', 'localhost').option('-c, --command <cmd>', 'The command to run to start the server', null).option('-s, --score', 'Print the score').option('-D, --no-debug', 'Disable debug output').option('-C, --no-colors', 'Disable color output').parse(process.argv);

if (!_commander2.default.command) {
  console.log('--command is required');
  process.exit(1);
}

global.program = _commander2.default;

const cli = new _cli.Cli({
  cwd: process.cwd(),
  options: _extends({
    featurePaths: [(0, _path.resolve)(__dirname, '../../features')],
    stepPaths: [(0, _path.resolve)(__dirname, '../steps')]
  }, R.pick(['colors', 'debug', 'port', 'host', 'command'], _commander2.default)),
  cucumberArgs: _commander2.default.args,
  stdout: getOutStream(_commander2.default.colors)
});

process.on('unhandledRejection', reason => {
  console.log('UNHANDLED REJECTION', reason);
});

process.on('SIGHUP', () => cli.gracefullyExit()).on('SIGINT', () => cli.gracefullyExit()).on('SIGQUIT', () => cli.gracefullyExit()).on('SIGTERM', () => cli.forceExit()).on('exit', () => cli.forceExit());

cli.precheck().then(({ ok, message }) => {
  if (ok) return cli.run();

  console.log(message);
  return null;
}).catch(err => {
  console.error((0, _verror.fullStack)(err));
  process.exit(1);
});

function getOutStream(enableColors) {
  if (enableColors) return process.stdout;

  const out = new _stripAnsi.StripAnsiTransform();
  out.pipe(process.stdout);

  return out;
}
//# sourceMappingURL=take-home-integration-test_LOCAL_17985.js.map