{"version":3,"sources":["../../src/steps/measurements.js"],"names":["Bluebird","R","acceptJson","accept","Given","Then","When","table","map","m","request","makeInsertRequest","each","res","statusCode","AssertionError","JSON","stringify","body","pipe","single","updateRequest","timestamp","method","url","headers","dateOrTimestamp","makeGetRequest","command","measurement","getMethod","Error","expect","to","eventually","have","property","promise","get","deep","equal"],"mappings":"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","file":"measurements.js","sourcesContent":["import { defineSupportCode } from 'cucumber';\nimport { readTableValuesAsJson } from '../lib/datatable';\nimport * as Bluebird from 'bluebird';\nimport * as R from 'ramda';\n\nconst acceptJson = { accept: 'application/json' };\n\ndefineSupportCode(({ Given, Then, When }) => {\n  Given(/^I have submitted new measurements as follows:$/, function (table) {\n    return Bluebird\n      .map(\n        readTableValuesAsJson(table),\n        m => this.request(makeInsertRequest(m)))\n      .each(res => {\n        if (res.statusCode !== 201)\n          throw new AssertionError(`Could not insert measurement, got code ${res.statusCode}. `\n            + `Response body: \\n${JSON.stringify(res.body, null, 2)}`);\n      });\n  });\n\n  When(/^I submit a new measurement as follows:$/, function (table) {\n    R.pipe(\n      readTableValuesAsJson,\n      single,\n      makeInsertRequest,\n      this.updateRequest,\n    )(table);\n  });\n\n  When(/^I delete the measurement for \"([^\"]*)\"$/, function (timestamp) {\n    this.updateRequest({\n      method: 'delete',\n      url: `/measurements/${timestamp}`,\n      headers: acceptJson,\n    });\n  });\n\n  When(/^I get (?:a measurement|measurements) for \"([^\"]*)\"$/, function (dateOrTimestamp) {\n    this.updateRequest(makeGetRequest(dateOrTimestamp));\n  });\n\n  When(/^I (replace|update) the measurement for \"([^\"]*)\" as follows:$/,\n    function (command, timestamp, table) {\n      const measurement = single(readTableValuesAsJson(table));\n\n      this.updateRequest({\n        method: getMethod(command),\n        url: `/measurements/${timestamp}`,\n        headers: acceptJson,\n        body: measurement,\n      });\n\n      function getMethod(command) {\n        switch (command) {\n          case 'replace': return 'put';\n          case 'update': return 'patch';\n          default: throw new Error(`Unsupported command: ${command}`);\n        }\n      }\n    });\n\n  Then(/^the measurement for \"([^\"]*)\" does not exist$/, function (timestamp) {\n    const res = this.request(makeGetRequest(timestamp));\n    return expect(res).to.eventually.have.property('statusCode', 404);\n  });\n\n  Then(/^the measurement for \"([^\"]*)\" is:$/, function (timestamp, table) {\n    const body = this.request(makeGetRequest(timestamp)).promise().get('body');\n    return expect(body).to.eventually.deep.equal(single(readTableValuesAsJson(table)));\n  });\n});\n\nfunction makeGetRequest(dateOrTimestamp) {\n  return {\n    method: 'get',\n    url: `/measurements/${dateOrTimestamp}`,\n    headers: acceptJson,\n  };\n}\n\nfunction makeInsertRequest(measurement) {\n  return {\n    method: 'post',\n    url: '/measurements',\n    body: measurement,\n  };\n}\n"]}